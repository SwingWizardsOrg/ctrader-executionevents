// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: OpenApiModelMessages.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtoOAPayloadType int32

const (
	ProtoOAPayloadType_PROTO_OA_APPLICATION_AUTH_REQ             ProtoOAPayloadType = 2100
	ProtoOAPayloadType_PROTO_OA_APPLICATION_AUTH_RES             ProtoOAPayloadType = 2101
	ProtoOAPayloadType_PROTO_OA_ACCOUNT_AUTH_REQ                 ProtoOAPayloadType = 2102
	ProtoOAPayloadType_PROTO_OA_ACCOUNT_AUTH_RES                 ProtoOAPayloadType = 2103
	ProtoOAPayloadType_PROTO_OA_VERSION_REQ                      ProtoOAPayloadType = 2104
	ProtoOAPayloadType_PROTO_OA_VERSION_RES                      ProtoOAPayloadType = 2105
	ProtoOAPayloadType_PROTO_OA_NEW_ORDER_REQ                    ProtoOAPayloadType = 2106
	ProtoOAPayloadType_PROTO_OA_TRAILING_SL_CHANGED_EVENT        ProtoOAPayloadType = 2107
	ProtoOAPayloadType_PROTO_OA_CANCEL_ORDER_REQ                 ProtoOAPayloadType = 2108
	ProtoOAPayloadType_PROTO_OA_AMEND_ORDER_REQ                  ProtoOAPayloadType = 2109
	ProtoOAPayloadType_PROTO_OA_AMEND_POSITION_SLTP_REQ          ProtoOAPayloadType = 2110
	ProtoOAPayloadType_PROTO_OA_CLOSE_POSITION_REQ               ProtoOAPayloadType = 2111
	ProtoOAPayloadType_PROTO_OA_ASSET_LIST_REQ                   ProtoOAPayloadType = 2112
	ProtoOAPayloadType_PROTO_OA_ASSET_LIST_RES                   ProtoOAPayloadType = 2113
	ProtoOAPayloadType_PROTO_OA_SYMBOLS_LIST_REQ                 ProtoOAPayloadType = 2114
	ProtoOAPayloadType_PROTO_OA_SYMBOLS_LIST_RES                 ProtoOAPayloadType = 2115
	ProtoOAPayloadType_PROTO_OA_SYMBOL_BY_ID_REQ                 ProtoOAPayloadType = 2116
	ProtoOAPayloadType_PROTO_OA_SYMBOL_BY_ID_RES                 ProtoOAPayloadType = 2117
	ProtoOAPayloadType_PROTO_OA_SYMBOLS_FOR_CONVERSION_REQ       ProtoOAPayloadType = 2118
	ProtoOAPayloadType_PROTO_OA_SYMBOLS_FOR_CONVERSION_RES       ProtoOAPayloadType = 2119
	ProtoOAPayloadType_PROTO_OA_SYMBOL_CHANGED_EVENT             ProtoOAPayloadType = 2120
	ProtoOAPayloadType_PROTO_OA_TRADER_REQ                       ProtoOAPayloadType = 2121
	ProtoOAPayloadType_PROTO_OA_TRADER_RES                       ProtoOAPayloadType = 2122
	ProtoOAPayloadType_PROTO_OA_TRADER_UPDATE_EVENT              ProtoOAPayloadType = 2123
	ProtoOAPayloadType_PROTO_OA_RECONCILE_REQ                    ProtoOAPayloadType = 2124
	ProtoOAPayloadType_PROTO_OA_RECONCILE_RES                    ProtoOAPayloadType = 2125
	ProtoOAPayloadType_PROTO_OA_EXECUTION_EVENT                  ProtoOAPayloadType = 2126
	ProtoOAPayloadType_PROTO_OA_SUBSCRIBE_SPOTS_REQ              ProtoOAPayloadType = 2127
	ProtoOAPayloadType_PROTO_OA_SUBSCRIBE_SPOTS_RES              ProtoOAPayloadType = 2128
	ProtoOAPayloadType_PROTO_OA_UNSUBSCRIBE_SPOTS_REQ            ProtoOAPayloadType = 2129
	ProtoOAPayloadType_PROTO_OA_UNSUBSCRIBE_SPOTS_RES            ProtoOAPayloadType = 2130
	ProtoOAPayloadType_PROTO_OA_SPOT_EVENT                       ProtoOAPayloadType = 2131
	ProtoOAPayloadType_PROTO_OA_ORDER_ERROR_EVENT                ProtoOAPayloadType = 2132
	ProtoOAPayloadType_PROTO_OA_DEAL_LIST_REQ                    ProtoOAPayloadType = 2133
	ProtoOAPayloadType_PROTO_OA_DEAL_LIST_RES                    ProtoOAPayloadType = 2134
	ProtoOAPayloadType_PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_REQ      ProtoOAPayloadType = 2135
	ProtoOAPayloadType_PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_REQ    ProtoOAPayloadType = 2136
	ProtoOAPayloadType_PROTO_OA_GET_TRENDBARS_REQ                ProtoOAPayloadType = 2137
	ProtoOAPayloadType_PROTO_OA_GET_TRENDBARS_RES                ProtoOAPayloadType = 2138
	ProtoOAPayloadType_PROTO_OA_EXPECTED_MARGIN_REQ              ProtoOAPayloadType = 2139
	ProtoOAPayloadType_PROTO_OA_EXPECTED_MARGIN_RES              ProtoOAPayloadType = 2140
	ProtoOAPayloadType_PROTO_OA_MARGIN_CHANGED_EVENT             ProtoOAPayloadType = 2141
	ProtoOAPayloadType_PROTO_OA_ERROR_RES                        ProtoOAPayloadType = 2142
	ProtoOAPayloadType_PROTO_OA_CASH_FLOW_HISTORY_LIST_REQ       ProtoOAPayloadType = 2143
	ProtoOAPayloadType_PROTO_OA_CASH_FLOW_HISTORY_LIST_RES       ProtoOAPayloadType = 2144
	ProtoOAPayloadType_PROTO_OA_GET_TICKDATA_REQ                 ProtoOAPayloadType = 2145
	ProtoOAPayloadType_PROTO_OA_GET_TICKDATA_RES                 ProtoOAPayloadType = 2146
	ProtoOAPayloadType_PROTO_OA_ACCOUNTS_TOKEN_INVALIDATED_EVENT ProtoOAPayloadType = 2147
	ProtoOAPayloadType_PROTO_OA_CLIENT_DISCONNECT_EVENT          ProtoOAPayloadType = 2148
	ProtoOAPayloadType_PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_REQ ProtoOAPayloadType = 2149
	ProtoOAPayloadType_PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_RES ProtoOAPayloadType = 2150
	ProtoOAPayloadType_PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_REQ    ProtoOAPayloadType = 2151
	ProtoOAPayloadType_PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_RES    ProtoOAPayloadType = 2152
	ProtoOAPayloadType_PROTO_OA_ASSET_CLASS_LIST_REQ             ProtoOAPayloadType = 2153
	ProtoOAPayloadType_PROTO_OA_ASSET_CLASS_LIST_RES             ProtoOAPayloadType = 2154
	ProtoOAPayloadType_PROTO_OA_DEPTH_EVENT                      ProtoOAPayloadType = 2155
	ProtoOAPayloadType_PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_REQ       ProtoOAPayloadType = 2156
	ProtoOAPayloadType_PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_RES       ProtoOAPayloadType = 2157
	ProtoOAPayloadType_PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_REQ     ProtoOAPayloadType = 2158
	ProtoOAPayloadType_PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_RES     ProtoOAPayloadType = 2159
	ProtoOAPayloadType_PROTO_OA_SYMBOL_CATEGORY_REQ              ProtoOAPayloadType = 2160
	ProtoOAPayloadType_PROTO_OA_SYMBOL_CATEGORY_RES              ProtoOAPayloadType = 2161
	ProtoOAPayloadType_PROTO_OA_ACCOUNT_LOGOUT_REQ               ProtoOAPayloadType = 2162
	ProtoOAPayloadType_PROTO_OA_ACCOUNT_LOGOUT_RES               ProtoOAPayloadType = 2163
	ProtoOAPayloadType_PROTO_OA_ACCOUNT_DISCONNECT_EVENT         ProtoOAPayloadType = 2164
	ProtoOAPayloadType_PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_RES      ProtoOAPayloadType = 2165
	ProtoOAPayloadType_PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_RES    ProtoOAPayloadType = 2166
	ProtoOAPayloadType_PROTO_OA_MARGIN_CALL_LIST_REQ             ProtoOAPayloadType = 2167
	ProtoOAPayloadType_PROTO_OA_MARGIN_CALL_LIST_RES             ProtoOAPayloadType = 2168
	ProtoOAPayloadType_PROTO_OA_MARGIN_CALL_UPDATE_REQ           ProtoOAPayloadType = 2169
	ProtoOAPayloadType_PROTO_OA_MARGIN_CALL_UPDATE_RES           ProtoOAPayloadType = 2170
	ProtoOAPayloadType_PROTO_OA_MARGIN_CALL_UPDATE_EVENT         ProtoOAPayloadType = 2171
	ProtoOAPayloadType_PROTO_OA_MARGIN_CALL_TRIGGER_EVENT        ProtoOAPayloadType = 2172
	ProtoOAPayloadType_PROTO_OA_REFRESH_TOKEN_REQ                ProtoOAPayloadType = 2173
	ProtoOAPayloadType_PROTO_OA_REFRESH_TOKEN_RES                ProtoOAPayloadType = 2174
	ProtoOAPayloadType_PROTO_OA_ORDER_LIST_REQ                   ProtoOAPayloadType = 2175
	ProtoOAPayloadType_PROTO_OA_ORDER_LIST_RES                   ProtoOAPayloadType = 2176
	ProtoOAPayloadType_PROTO_OA_GET_DYNAMIC_LEVERAGE_REQ         ProtoOAPayloadType = 2177
	ProtoOAPayloadType_PROTO_OA_GET_DYNAMIC_LEVERAGE_RES         ProtoOAPayloadType = 2178
	ProtoOAPayloadType_PROTO_OA_DEAL_LIST_BY_POSITION_ID_REQ     ProtoOAPayloadType = 2179
	ProtoOAPayloadType_PROTO_OA_DEAL_LIST_BY_POSITION_ID_RES     ProtoOAPayloadType = 2180
)

// Enum value maps for ProtoOAPayloadType.
var (
	ProtoOAPayloadType_name = map[int32]string{
		2100: "PROTO_OA_APPLICATION_AUTH_REQ",
		2101: "PROTO_OA_APPLICATION_AUTH_RES",
		2102: "PROTO_OA_ACCOUNT_AUTH_REQ",
		2103: "PROTO_OA_ACCOUNT_AUTH_RES",
		2104: "PROTO_OA_VERSION_REQ",
		2105: "PROTO_OA_VERSION_RES",
		2106: "PROTO_OA_NEW_ORDER_REQ",
		2107: "PROTO_OA_TRAILING_SL_CHANGED_EVENT",
		2108: "PROTO_OA_CANCEL_ORDER_REQ",
		2109: "PROTO_OA_AMEND_ORDER_REQ",
		2110: "PROTO_OA_AMEND_POSITION_SLTP_REQ",
		2111: "PROTO_OA_CLOSE_POSITION_REQ",
		2112: "PROTO_OA_ASSET_LIST_REQ",
		2113: "PROTO_OA_ASSET_LIST_RES",
		2114: "PROTO_OA_SYMBOLS_LIST_REQ",
		2115: "PROTO_OA_SYMBOLS_LIST_RES",
		2116: "PROTO_OA_SYMBOL_BY_ID_REQ",
		2117: "PROTO_OA_SYMBOL_BY_ID_RES",
		2118: "PROTO_OA_SYMBOLS_FOR_CONVERSION_REQ",
		2119: "PROTO_OA_SYMBOLS_FOR_CONVERSION_RES",
		2120: "PROTO_OA_SYMBOL_CHANGED_EVENT",
		2121: "PROTO_OA_TRADER_REQ",
		2122: "PROTO_OA_TRADER_RES",
		2123: "PROTO_OA_TRADER_UPDATE_EVENT",
		2124: "PROTO_OA_RECONCILE_REQ",
		2125: "PROTO_OA_RECONCILE_RES",
		2126: "PROTO_OA_EXECUTION_EVENT",
		2127: "PROTO_OA_SUBSCRIBE_SPOTS_REQ",
		2128: "PROTO_OA_SUBSCRIBE_SPOTS_RES",
		2129: "PROTO_OA_UNSUBSCRIBE_SPOTS_REQ",
		2130: "PROTO_OA_UNSUBSCRIBE_SPOTS_RES",
		2131: "PROTO_OA_SPOT_EVENT",
		2132: "PROTO_OA_ORDER_ERROR_EVENT",
		2133: "PROTO_OA_DEAL_LIST_REQ",
		2134: "PROTO_OA_DEAL_LIST_RES",
		2135: "PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_REQ",
		2136: "PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_REQ",
		2137: "PROTO_OA_GET_TRENDBARS_REQ",
		2138: "PROTO_OA_GET_TRENDBARS_RES",
		2139: "PROTO_OA_EXPECTED_MARGIN_REQ",
		2140: "PROTO_OA_EXPECTED_MARGIN_RES",
		2141: "PROTO_OA_MARGIN_CHANGED_EVENT",
		2142: "PROTO_OA_ERROR_RES",
		2143: "PROTO_OA_CASH_FLOW_HISTORY_LIST_REQ",
		2144: "PROTO_OA_CASH_FLOW_HISTORY_LIST_RES",
		2145: "PROTO_OA_GET_TICKDATA_REQ",
		2146: "PROTO_OA_GET_TICKDATA_RES",
		2147: "PROTO_OA_ACCOUNTS_TOKEN_INVALIDATED_EVENT",
		2148: "PROTO_OA_CLIENT_DISCONNECT_EVENT",
		2149: "PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_REQ",
		2150: "PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_RES",
		2151: "PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_REQ",
		2152: "PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_RES",
		2153: "PROTO_OA_ASSET_CLASS_LIST_REQ",
		2154: "PROTO_OA_ASSET_CLASS_LIST_RES",
		2155: "PROTO_OA_DEPTH_EVENT",
		2156: "PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_REQ",
		2157: "PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_RES",
		2158: "PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_REQ",
		2159: "PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_RES",
		2160: "PROTO_OA_SYMBOL_CATEGORY_REQ",
		2161: "PROTO_OA_SYMBOL_CATEGORY_RES",
		2162: "PROTO_OA_ACCOUNT_LOGOUT_REQ",
		2163: "PROTO_OA_ACCOUNT_LOGOUT_RES",
		2164: "PROTO_OA_ACCOUNT_DISCONNECT_EVENT",
		2165: "PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_RES",
		2166: "PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_RES",
		2167: "PROTO_OA_MARGIN_CALL_LIST_REQ",
		2168: "PROTO_OA_MARGIN_CALL_LIST_RES",
		2169: "PROTO_OA_MARGIN_CALL_UPDATE_REQ",
		2170: "PROTO_OA_MARGIN_CALL_UPDATE_RES",
		2171: "PROTO_OA_MARGIN_CALL_UPDATE_EVENT",
		2172: "PROTO_OA_MARGIN_CALL_TRIGGER_EVENT",
		2173: "PROTO_OA_REFRESH_TOKEN_REQ",
		2174: "PROTO_OA_REFRESH_TOKEN_RES",
		2175: "PROTO_OA_ORDER_LIST_REQ",
		2176: "PROTO_OA_ORDER_LIST_RES",
		2177: "PROTO_OA_GET_DYNAMIC_LEVERAGE_REQ",
		2178: "PROTO_OA_GET_DYNAMIC_LEVERAGE_RES",
		2179: "PROTO_OA_DEAL_LIST_BY_POSITION_ID_REQ",
		2180: "PROTO_OA_DEAL_LIST_BY_POSITION_ID_RES",
	}
	ProtoOAPayloadType_value = map[string]int32{
		"PROTO_OA_APPLICATION_AUTH_REQ":             2100,
		"PROTO_OA_APPLICATION_AUTH_RES":             2101,
		"PROTO_OA_ACCOUNT_AUTH_REQ":                 2102,
		"PROTO_OA_ACCOUNT_AUTH_RES":                 2103,
		"PROTO_OA_VERSION_REQ":                      2104,
		"PROTO_OA_VERSION_RES":                      2105,
		"PROTO_OA_NEW_ORDER_REQ":                    2106,
		"PROTO_OA_TRAILING_SL_CHANGED_EVENT":        2107,
		"PROTO_OA_CANCEL_ORDER_REQ":                 2108,
		"PROTO_OA_AMEND_ORDER_REQ":                  2109,
		"PROTO_OA_AMEND_POSITION_SLTP_REQ":          2110,
		"PROTO_OA_CLOSE_POSITION_REQ":               2111,
		"PROTO_OA_ASSET_LIST_REQ":                   2112,
		"PROTO_OA_ASSET_LIST_RES":                   2113,
		"PROTO_OA_SYMBOLS_LIST_REQ":                 2114,
		"PROTO_OA_SYMBOLS_LIST_RES":                 2115,
		"PROTO_OA_SYMBOL_BY_ID_REQ":                 2116,
		"PROTO_OA_SYMBOL_BY_ID_RES":                 2117,
		"PROTO_OA_SYMBOLS_FOR_CONVERSION_REQ":       2118,
		"PROTO_OA_SYMBOLS_FOR_CONVERSION_RES":       2119,
		"PROTO_OA_SYMBOL_CHANGED_EVENT":             2120,
		"PROTO_OA_TRADER_REQ":                       2121,
		"PROTO_OA_TRADER_RES":                       2122,
		"PROTO_OA_TRADER_UPDATE_EVENT":              2123,
		"PROTO_OA_RECONCILE_REQ":                    2124,
		"PROTO_OA_RECONCILE_RES":                    2125,
		"PROTO_OA_EXECUTION_EVENT":                  2126,
		"PROTO_OA_SUBSCRIBE_SPOTS_REQ":              2127,
		"PROTO_OA_SUBSCRIBE_SPOTS_RES":              2128,
		"PROTO_OA_UNSUBSCRIBE_SPOTS_REQ":            2129,
		"PROTO_OA_UNSUBSCRIBE_SPOTS_RES":            2130,
		"PROTO_OA_SPOT_EVENT":                       2131,
		"PROTO_OA_ORDER_ERROR_EVENT":                2132,
		"PROTO_OA_DEAL_LIST_REQ":                    2133,
		"PROTO_OA_DEAL_LIST_RES":                    2134,
		"PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_REQ":      2135,
		"PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_REQ":    2136,
		"PROTO_OA_GET_TRENDBARS_REQ":                2137,
		"PROTO_OA_GET_TRENDBARS_RES":                2138,
		"PROTO_OA_EXPECTED_MARGIN_REQ":              2139,
		"PROTO_OA_EXPECTED_MARGIN_RES":              2140,
		"PROTO_OA_MARGIN_CHANGED_EVENT":             2141,
		"PROTO_OA_ERROR_RES":                        2142,
		"PROTO_OA_CASH_FLOW_HISTORY_LIST_REQ":       2143,
		"PROTO_OA_CASH_FLOW_HISTORY_LIST_RES":       2144,
		"PROTO_OA_GET_TICKDATA_REQ":                 2145,
		"PROTO_OA_GET_TICKDATA_RES":                 2146,
		"PROTO_OA_ACCOUNTS_TOKEN_INVALIDATED_EVENT": 2147,
		"PROTO_OA_CLIENT_DISCONNECT_EVENT":          2148,
		"PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_REQ": 2149,
		"PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_RES": 2150,
		"PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_REQ":    2151,
		"PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_RES":    2152,
		"PROTO_OA_ASSET_CLASS_LIST_REQ":             2153,
		"PROTO_OA_ASSET_CLASS_LIST_RES":             2154,
		"PROTO_OA_DEPTH_EVENT":                      2155,
		"PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_REQ":       2156,
		"PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_RES":       2157,
		"PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_REQ":     2158,
		"PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_RES":     2159,
		"PROTO_OA_SYMBOL_CATEGORY_REQ":              2160,
		"PROTO_OA_SYMBOL_CATEGORY_RES":              2161,
		"PROTO_OA_ACCOUNT_LOGOUT_REQ":               2162,
		"PROTO_OA_ACCOUNT_LOGOUT_RES":               2163,
		"PROTO_OA_ACCOUNT_DISCONNECT_EVENT":         2164,
		"PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_RES":      2165,
		"PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_RES":    2166,
		"PROTO_OA_MARGIN_CALL_LIST_REQ":             2167,
		"PROTO_OA_MARGIN_CALL_LIST_RES":             2168,
		"PROTO_OA_MARGIN_CALL_UPDATE_REQ":           2169,
		"PROTO_OA_MARGIN_CALL_UPDATE_RES":           2170,
		"PROTO_OA_MARGIN_CALL_UPDATE_EVENT":         2171,
		"PROTO_OA_MARGIN_CALL_TRIGGER_EVENT":        2172,
		"PROTO_OA_REFRESH_TOKEN_REQ":                2173,
		"PROTO_OA_REFRESH_TOKEN_RES":                2174,
		"PROTO_OA_ORDER_LIST_REQ":                   2175,
		"PROTO_OA_ORDER_LIST_RES":                   2176,
		"PROTO_OA_GET_DYNAMIC_LEVERAGE_REQ":         2177,
		"PROTO_OA_GET_DYNAMIC_LEVERAGE_RES":         2178,
		"PROTO_OA_DEAL_LIST_BY_POSITION_ID_REQ":     2179,
		"PROTO_OA_DEAL_LIST_BY_POSITION_ID_RES":     2180,
	}
)

func (x ProtoOAPayloadType) Enum() *ProtoOAPayloadType {
	p := new(ProtoOAPayloadType)
	*p = x
	return p
}

func (x ProtoOAPayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOAPayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[0].Descriptor()
}

func (ProtoOAPayloadType) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[0]
}

func (x ProtoOAPayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOAPayloadType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOAPayloadType(num)
	return nil
}

// Deprecated: Use ProtoOAPayloadType.Descriptor instead.
func (ProtoOAPayloadType) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{0}
}

// * Enum for specifying access right for a trader.
type ProtoOAAccessRights int32

const (
	ProtoOAAccessRights_FULL_ACCESS ProtoOAAccessRights = 0 // Enable all trading.
	ProtoOAAccessRights_CLOSE_ONLY  ProtoOAAccessRights = 1 // Only closing trading request are enabled.
	ProtoOAAccessRights_NO_TRADING  ProtoOAAccessRights = 2 // View only access.
	ProtoOAAccessRights_NO_LOGIN    ProtoOAAccessRights = 3 // No access.
)

// Enum value maps for ProtoOAAccessRights.
var (
	ProtoOAAccessRights_name = map[int32]string{
		0: "FULL_ACCESS",
		1: "CLOSE_ONLY",
		2: "NO_TRADING",
		3: "NO_LOGIN",
	}
	ProtoOAAccessRights_value = map[string]int32{
		"FULL_ACCESS": 0,
		"CLOSE_ONLY":  1,
		"NO_TRADING":  2,
		"NO_LOGIN":    3,
	}
)

func (x ProtoOAAccessRights) Enum() *ProtoOAAccessRights {
	p := new(ProtoOAAccessRights)
	*p = x
	return p
}

func (x ProtoOAAccessRights) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOAAccessRights) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[1].Descriptor()
}

func (ProtoOAAccessRights) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[1]
}

func (x ProtoOAAccessRights) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOAAccessRights) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOAAccessRights(num)
	return nil
}

// Deprecated: Use ProtoOAAccessRights.Descriptor instead.
func (ProtoOAAccessRights) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{1}
}

// * Enum for specifying margin calculation type for an account.
type ProtoOATotalMarginCalculationType int32

const (
	ProtoOATotalMarginCalculationType_MAX ProtoOATotalMarginCalculationType = 0
	ProtoOATotalMarginCalculationType_SUM ProtoOATotalMarginCalculationType = 1
	ProtoOATotalMarginCalculationType_NET ProtoOATotalMarginCalculationType = 2
)

// Enum value maps for ProtoOATotalMarginCalculationType.
var (
	ProtoOATotalMarginCalculationType_name = map[int32]string{
		0: "MAX",
		1: "SUM",
		2: "NET",
	}
	ProtoOATotalMarginCalculationType_value = map[string]int32{
		"MAX": 0,
		"SUM": 1,
		"NET": 2,
	}
)

func (x ProtoOATotalMarginCalculationType) Enum() *ProtoOATotalMarginCalculationType {
	p := new(ProtoOATotalMarginCalculationType)
	*p = x
	return p
}

func (x ProtoOATotalMarginCalculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOATotalMarginCalculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[2].Descriptor()
}

func (ProtoOATotalMarginCalculationType) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[2]
}

func (x ProtoOATotalMarginCalculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOATotalMarginCalculationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOATotalMarginCalculationType(num)
	return nil
}

// Deprecated: Use ProtoOATotalMarginCalculationType.Descriptor instead.
func (ProtoOATotalMarginCalculationType) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{2}
}

// * Enum for specifying type of an account.
type ProtoOAAccountType int32

const (
	ProtoOAAccountType_HEDGED         ProtoOAAccountType = 0 // Allows multiple positions on a trading account for a symbol.
	ProtoOAAccountType_NETTED         ProtoOAAccountType = 1 // Only one position per symbol is allowed on a trading account.
	ProtoOAAccountType_SPREAD_BETTING ProtoOAAccountType = 2 // Spread betting type account.
)

// Enum value maps for ProtoOAAccountType.
var (
	ProtoOAAccountType_name = map[int32]string{
		0: "HEDGED",
		1: "NETTED",
		2: "SPREAD_BETTING",
	}
	ProtoOAAccountType_value = map[string]int32{
		"HEDGED":         0,
		"NETTED":         1,
		"SPREAD_BETTING": 2,
	}
)

func (x ProtoOAAccountType) Enum() *ProtoOAAccountType {
	p := new(ProtoOAAccountType)
	*p = x
	return p
}

func (x ProtoOAAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOAAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[3].Descriptor()
}

func (ProtoOAAccountType) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[3]
}

func (x ProtoOAAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOAAccountType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOAAccountType(num)
	return nil
}

// Deprecated: Use ProtoOAAccountType.Descriptor instead.
func (ProtoOAAccountType) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{3}
}

type ProtoOALimitedRiskMarginCalculationStrategy int32

const (
	ProtoOALimitedRiskMarginCalculationStrategy_ACCORDING_TO_LEVERAGE ProtoOALimitedRiskMarginCalculationStrategy = 0
	ProtoOALimitedRiskMarginCalculationStrategy_ACCORDING_TO_GSL      ProtoOALimitedRiskMarginCalculationStrategy = 1
)

// Enum value maps for ProtoOALimitedRiskMarginCalculationStrategy.
var (
	ProtoOALimitedRiskMarginCalculationStrategy_name = map[int32]string{
		0: "ACCORDING_TO_LEVERAGE",
		1: "ACCORDING_TO_GSL",
	}
	ProtoOALimitedRiskMarginCalculationStrategy_value = map[string]int32{
		"ACCORDING_TO_LEVERAGE": 0,
		"ACCORDING_TO_GSL":      1,
	}
)

func (x ProtoOALimitedRiskMarginCalculationStrategy) Enum() *ProtoOALimitedRiskMarginCalculationStrategy {
	p := new(ProtoOALimitedRiskMarginCalculationStrategy)
	*p = x
	return p
}

func (x ProtoOALimitedRiskMarginCalculationStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOALimitedRiskMarginCalculationStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[4].Descriptor()
}

func (ProtoOALimitedRiskMarginCalculationStrategy) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[4]
}

func (x ProtoOALimitedRiskMarginCalculationStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOALimitedRiskMarginCalculationStrategy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOALimitedRiskMarginCalculationStrategy(num)
	return nil
}

// Deprecated: Use ProtoOALimitedRiskMarginCalculationStrategy.Descriptor instead.
func (ProtoOALimitedRiskMarginCalculationStrategy) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{4}
}

// * Position status ENUM.
type ProtoOAPositionStatus int32

const (
	ProtoOAPositionStatus_POSITION_STATUS_OPEN    ProtoOAPositionStatus = 1
	ProtoOAPositionStatus_POSITION_STATUS_CLOSED  ProtoOAPositionStatus = 2
	ProtoOAPositionStatus_POSITION_STATUS_CREATED ProtoOAPositionStatus = 3 // Empty position is created for pending order.
	ProtoOAPositionStatus_POSITION_STATUS_ERROR   ProtoOAPositionStatus = 4
)

// Enum value maps for ProtoOAPositionStatus.
var (
	ProtoOAPositionStatus_name = map[int32]string{
		1: "POSITION_STATUS_OPEN",
		2: "POSITION_STATUS_CLOSED",
		3: "POSITION_STATUS_CREATED",
		4: "POSITION_STATUS_ERROR",
	}
	ProtoOAPositionStatus_value = map[string]int32{
		"POSITION_STATUS_OPEN":    1,
		"POSITION_STATUS_CLOSED":  2,
		"POSITION_STATUS_CREATED": 3,
		"POSITION_STATUS_ERROR":   4,
	}
)

func (x ProtoOAPositionStatus) Enum() *ProtoOAPositionStatus {
	p := new(ProtoOAPositionStatus)
	*p = x
	return p
}

func (x ProtoOAPositionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOAPositionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[5].Descriptor()
}

func (ProtoOAPositionStatus) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[5]
}

func (x ProtoOAPositionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOAPositionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOAPositionStatus(num)
	return nil
}

// Deprecated: Use ProtoOAPositionStatus.Descriptor instead.
func (ProtoOAPositionStatus) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{5}
}

// * Trader side ENUM. Used for order, position, deal.
type ProtoOATradeSide int32

const (
	ProtoOATradeSide_BUY  ProtoOATradeSide = 1
	ProtoOATradeSide_SELL ProtoOATradeSide = 2
)

// Enum value maps for ProtoOATradeSide.
var (
	ProtoOATradeSide_name = map[int32]string{
		1: "BUY",
		2: "SELL",
	}
	ProtoOATradeSide_value = map[string]int32{
		"BUY":  1,
		"SELL": 2,
	}
)

func (x ProtoOATradeSide) Enum() *ProtoOATradeSide {
	p := new(ProtoOATradeSide)
	*p = x
	return p
}

func (x ProtoOATradeSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOATradeSide) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[6].Descriptor()
}

func (ProtoOATradeSide) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[6]
}

func (x ProtoOATradeSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOATradeSide) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOATradeSide(num)
	return nil
}

// Deprecated: Use ProtoOATradeSide.Descriptor instead.
func (ProtoOATradeSide) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{6}
}

// * Stop Order and Stop Lost triggering method ENUM.
type ProtoOAOrderTriggerMethod int32

const (
	ProtoOAOrderTriggerMethod_TRADE           ProtoOAOrderTriggerMethod = 1 // Stop Order: buy is triggered by ask, sell by bid; Stop Loss Order: for buy position is triggered by bid and for sell position by ask.
	ProtoOAOrderTriggerMethod_OPPOSITE        ProtoOAOrderTriggerMethod = 2 // Stop Order: buy is triggered by bid, sell by ask; Stop Loss Order: for buy position is triggered by ask and for sell position by bid.
	ProtoOAOrderTriggerMethod_DOUBLE_TRADE    ProtoOAOrderTriggerMethod = 3 // The same as TRADE, but trigger is checked after the second consecutive tick.
	ProtoOAOrderTriggerMethod_DOUBLE_OPPOSITE ProtoOAOrderTriggerMethod = 4 // The same as OPPOSITE, but trigger is checked after the second consecutive tick.
)

// Enum value maps for ProtoOAOrderTriggerMethod.
var (
	ProtoOAOrderTriggerMethod_name = map[int32]string{
		1: "TRADE",
		2: "OPPOSITE",
		3: "DOUBLE_TRADE",
		4: "DOUBLE_OPPOSITE",
	}
	ProtoOAOrderTriggerMethod_value = map[string]int32{
		"TRADE":           1,
		"OPPOSITE":        2,
		"DOUBLE_TRADE":    3,
		"DOUBLE_OPPOSITE": 4,
	}
)

func (x ProtoOAOrderTriggerMethod) Enum() *ProtoOAOrderTriggerMethod {
	p := new(ProtoOAOrderTriggerMethod)
	*p = x
	return p
}

func (x ProtoOAOrderTriggerMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOAOrderTriggerMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[7].Descriptor()
}

func (ProtoOAOrderTriggerMethod) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[7]
}

func (x ProtoOAOrderTriggerMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOAOrderTriggerMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOAOrderTriggerMethod(num)
	return nil
}

// Deprecated: Use ProtoOAOrderTriggerMethod.Descriptor instead.
func (ProtoOAOrderTriggerMethod) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{7}
}

// * Order type ENUM.
type ProtoOAOrderType int32

const (
	ProtoOAOrderType_MARKET                ProtoOAOrderType = 1
	ProtoOAOrderType_LIMIT                 ProtoOAOrderType = 2
	ProtoOAOrderType_STOP                  ProtoOAOrderType = 3
	ProtoOAOrderType_STOP_LOSS_TAKE_PROFIT ProtoOAOrderType = 4
	ProtoOAOrderType_MARKET_RANGE          ProtoOAOrderType = 5
	ProtoOAOrderType_STOP_LIMIT            ProtoOAOrderType = 6
)

// Enum value maps for ProtoOAOrderType.
var (
	ProtoOAOrderType_name = map[int32]string{
		1: "MARKET",
		2: "LIMIT",
		3: "STOP",
		4: "STOP_LOSS_TAKE_PROFIT",
		5: "MARKET_RANGE",
		6: "STOP_LIMIT",
	}
	ProtoOAOrderType_value = map[string]int32{
		"MARKET":                1,
		"LIMIT":                 2,
		"STOP":                  3,
		"STOP_LOSS_TAKE_PROFIT": 4,
		"MARKET_RANGE":          5,
		"STOP_LIMIT":            6,
	}
)

func (x ProtoOAOrderType) Enum() *ProtoOAOrderType {
	p := new(ProtoOAOrderType)
	*p = x
	return p
}

func (x ProtoOAOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOAOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[8].Descriptor()
}

func (ProtoOAOrderType) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[8]
}

func (x ProtoOAOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOAOrderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOAOrderType(num)
	return nil
}

// Deprecated: Use ProtoOAOrderType.Descriptor instead.
func (ProtoOAOrderType) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{8}
}

// * Order status ENUM.
type ProtoOAOrderStatus int32

const (
	ProtoOAOrderStatus_ORDER_STATUS_ACCEPTED  ProtoOAOrderStatus = 1 // Order request validated and accepted for execution.
	ProtoOAOrderStatus_ORDER_STATUS_FILLED    ProtoOAOrderStatus = 2 // Order is fully filled.
	ProtoOAOrderStatus_ORDER_STATUS_REJECTED  ProtoOAOrderStatus = 3 // Order is rejected due to validation.
	ProtoOAOrderStatus_ORDER_STATUS_EXPIRED   ProtoOAOrderStatus = 4 // Order expired. Might be valid for orders with partially filled volume that were expired on LP.
	ProtoOAOrderStatus_ORDER_STATUS_CANCELLED ProtoOAOrderStatus = 5 // Order is cancelled. Might be valid for orders with partially filled volume that were cancelled by LP.
)

// Enum value maps for ProtoOAOrderStatus.
var (
	ProtoOAOrderStatus_name = map[int32]string{
		1: "ORDER_STATUS_ACCEPTED",
		2: "ORDER_STATUS_FILLED",
		3: "ORDER_STATUS_REJECTED",
		4: "ORDER_STATUS_EXPIRED",
		5: "ORDER_STATUS_CANCELLED",
	}
	ProtoOAOrderStatus_value = map[string]int32{
		"ORDER_STATUS_ACCEPTED":  1,
		"ORDER_STATUS_FILLED":    2,
		"ORDER_STATUS_REJECTED":  3,
		"ORDER_STATUS_EXPIRED":   4,
		"ORDER_STATUS_CANCELLED": 5,
	}
)

func (x ProtoOAOrderStatus) Enum() *ProtoOAOrderStatus {
	p := new(ProtoOAOrderStatus)
	*p = x
	return p
}

func (x ProtoOAOrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOAOrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[9].Descriptor()
}

func (ProtoOAOrderStatus) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[9]
}

func (x ProtoOAOrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOAOrderStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOAOrderStatus(num)
	return nil
}

// Deprecated: Use ProtoOAOrderStatus.Descriptor instead.
func (ProtoOAOrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{9}
}

// * Order's time in force ENUM.
type ProtoOATimeInForce int32

const (
	ProtoOATimeInForce_GOOD_TILL_DATE      ProtoOATimeInForce = 1
	ProtoOATimeInForce_GOOD_TILL_CANCEL    ProtoOATimeInForce = 2
	ProtoOATimeInForce_IMMEDIATE_OR_CANCEL ProtoOATimeInForce = 3
	ProtoOATimeInForce_FILL_OR_KILL        ProtoOATimeInForce = 4
	ProtoOATimeInForce_MARKET_ON_OPEN      ProtoOATimeInForce = 5
)

// Enum value maps for ProtoOATimeInForce.
var (
	ProtoOATimeInForce_name = map[int32]string{
		1: "GOOD_TILL_DATE",
		2: "GOOD_TILL_CANCEL",
		3: "IMMEDIATE_OR_CANCEL",
		4: "FILL_OR_KILL",
		5: "MARKET_ON_OPEN",
	}
	ProtoOATimeInForce_value = map[string]int32{
		"GOOD_TILL_DATE":      1,
		"GOOD_TILL_CANCEL":    2,
		"IMMEDIATE_OR_CANCEL": 3,
		"FILL_OR_KILL":        4,
		"MARKET_ON_OPEN":      5,
	}
)

func (x ProtoOATimeInForce) Enum() *ProtoOATimeInForce {
	p := new(ProtoOATimeInForce)
	*p = x
	return p
}

func (x ProtoOATimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOATimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[10].Descriptor()
}

func (ProtoOATimeInForce) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[10]
}

func (x ProtoOATimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOATimeInForce) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOATimeInForce(num)
	return nil
}

// Deprecated: Use ProtoOATimeInForce.Descriptor instead.
func (ProtoOATimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{10}
}

type ProtoOADayOfWeek int32

const (
	ProtoOADayOfWeek_NONE      ProtoOADayOfWeek = 0
	ProtoOADayOfWeek_MONDAY    ProtoOADayOfWeek = 1
	ProtoOADayOfWeek_TUESDAY   ProtoOADayOfWeek = 2
	ProtoOADayOfWeek_WEDNESDAY ProtoOADayOfWeek = 3
	ProtoOADayOfWeek_THURSDAY  ProtoOADayOfWeek = 4
	ProtoOADayOfWeek_FRIDAY    ProtoOADayOfWeek = 5
	ProtoOADayOfWeek_SATURDAY  ProtoOADayOfWeek = 6
	ProtoOADayOfWeek_SUNDAY    ProtoOADayOfWeek = 7
)

// Enum value maps for ProtoOADayOfWeek.
var (
	ProtoOADayOfWeek_name = map[int32]string{
		0: "NONE",
		1: "MONDAY",
		2: "TUESDAY",
		3: "WEDNESDAY",
		4: "THURSDAY",
		5: "FRIDAY",
		6: "SATURDAY",
		7: "SUNDAY",
	}
	ProtoOADayOfWeek_value = map[string]int32{
		"NONE":      0,
		"MONDAY":    1,
		"TUESDAY":   2,
		"WEDNESDAY": 3,
		"THURSDAY":  4,
		"FRIDAY":    5,
		"SATURDAY":  6,
		"SUNDAY":    7,
	}
)

func (x ProtoOADayOfWeek) Enum() *ProtoOADayOfWeek {
	p := new(ProtoOADayOfWeek)
	*p = x
	return p
}

func (x ProtoOADayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOADayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[11].Descriptor()
}

func (ProtoOADayOfWeek) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[11]
}

func (x ProtoOADayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOADayOfWeek) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOADayOfWeek(num)
	return nil
}

// Deprecated: Use ProtoOADayOfWeek.Descriptor instead.
func (ProtoOADayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{11}
}

// * Enum for specifying type of minimum trading commission.
type ProtoOAMinCommissionType int32

const (
	ProtoOAMinCommissionType_CURRENCY       ProtoOAMinCommissionType = 1
	ProtoOAMinCommissionType_QUOTE_CURRENCY ProtoOAMinCommissionType = 2
)

// Enum value maps for ProtoOAMinCommissionType.
var (
	ProtoOAMinCommissionType_name = map[int32]string{
		1: "CURRENCY",
		2: "QUOTE_CURRENCY",
	}
	ProtoOAMinCommissionType_value = map[string]int32{
		"CURRENCY":       1,
		"QUOTE_CURRENCY": 2,
	}
)

func (x ProtoOAMinCommissionType) Enum() *ProtoOAMinCommissionType {
	p := new(ProtoOAMinCommissionType)
	*p = x
	return p
}

func (x ProtoOAMinCommissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOAMinCommissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[12].Descriptor()
}

func (ProtoOAMinCommissionType) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[12]
}

func (x ProtoOAMinCommissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOAMinCommissionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOAMinCommissionType(num)
	return nil
}

// Deprecated: Use ProtoOAMinCommissionType.Descriptor instead.
func (ProtoOAMinCommissionType) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{12}
}

// * Enum for specifying symbol trading mode.
type ProtoOATradingMode int32

const (
	ProtoOATradingMode_ENABLED                             ProtoOATradingMode = 0
	ProtoOATradingMode_DISABLED_WITHOUT_PENDINGS_EXECUTION ProtoOATradingMode = 1
	ProtoOATradingMode_DISABLED_WITH_PENDINGS_EXECUTION    ProtoOATradingMode = 2
	ProtoOATradingMode_CLOSE_ONLY_MODE                     ProtoOATradingMode = 3
)

// Enum value maps for ProtoOATradingMode.
var (
	ProtoOATradingMode_name = map[int32]string{
		0: "ENABLED",
		1: "DISABLED_WITHOUT_PENDINGS_EXECUTION",
		2: "DISABLED_WITH_PENDINGS_EXECUTION",
		3: "CLOSE_ONLY_MODE",
	}
	ProtoOATradingMode_value = map[string]int32{
		"ENABLED":                             0,
		"DISABLED_WITHOUT_PENDINGS_EXECUTION": 1,
		"DISABLED_WITH_PENDINGS_EXECUTION":    2,
		"CLOSE_ONLY_MODE":                     3,
	}
)

func (x ProtoOATradingMode) Enum() *ProtoOATradingMode {
	p := new(ProtoOATradingMode)
	*p = x
	return p
}

func (x ProtoOATradingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOATradingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[13].Descriptor()
}

func (ProtoOATradingMode) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[13]
}

func (x ProtoOATradingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOATradingMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOATradingMode(num)
	return nil
}

// Deprecated: Use ProtoOATradingMode.Descriptor instead.
func (ProtoOATradingMode) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{13}
}

// * Enum for specifying type of trading commission.
type ProtoOACommissionType int32

const (
	ProtoOACommissionType_USD_PER_MIL_USD   ProtoOACommissionType = 1 // USD per million USD volume - usually used for FX. Example: 50 USD for 1 mil USD of trading volume. In cents.
	ProtoOACommissionType_USD_PER_LOT       ProtoOACommissionType = 2 // USD per 1 lot - usually used for CFDs and futures for commodities, and indices. Example: 15 USD for 1 contract. In cents.
	ProtoOACommissionType_PERCENTAGE        ProtoOACommissionType = 3 // Percentage of trading volume - usually used for Equities. Example: 0.005% of notional trading volume. Multiplied by 100,00.
	ProtoOACommissionType_QUOTE_CCY_PER_LOT ProtoOACommissionType = 4 // Quote ccy of Symbol per 1 lot - will be used for CFDs and futures for commodities, and indices. Example: 15 EUR for 1 contract of DAX. In cents.
)

// Enum value maps for ProtoOACommissionType.
var (
	ProtoOACommissionType_name = map[int32]string{
		1: "USD_PER_MIL_USD",
		2: "USD_PER_LOT",
		3: "PERCENTAGE",
		4: "QUOTE_CCY_PER_LOT",
	}
	ProtoOACommissionType_value = map[string]int32{
		"USD_PER_MIL_USD":   1,
		"USD_PER_LOT":       2,
		"PERCENTAGE":        3,
		"QUOTE_CCY_PER_LOT": 4,
	}
)

func (x ProtoOACommissionType) Enum() *ProtoOACommissionType {
	p := new(ProtoOACommissionType)
	*p = x
	return p
}

func (x ProtoOACommissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOACommissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[14].Descriptor()
}

func (ProtoOACommissionType) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[14]
}

func (x ProtoOACommissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOACommissionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOACommissionType(num)
	return nil
}

// Deprecated: Use ProtoOACommissionType.Descriptor instead.
func (ProtoOACommissionType) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{14}
}

// * Enum for specifying stop loss and take profit distances.
type ProtoOASymbolDistanceType int32

const (
	ProtoOASymbolDistanceType_SYMBOL_DISTANCE_IN_POINTS     ProtoOASymbolDistanceType = 1
	ProtoOASymbolDistanceType_SYMBOL_DISTANCE_IN_PERCENTAGE ProtoOASymbolDistanceType = 2
)

// Enum value maps for ProtoOASymbolDistanceType.
var (
	ProtoOASymbolDistanceType_name = map[int32]string{
		1: "SYMBOL_DISTANCE_IN_POINTS",
		2: "SYMBOL_DISTANCE_IN_PERCENTAGE",
	}
	ProtoOASymbolDistanceType_value = map[string]int32{
		"SYMBOL_DISTANCE_IN_POINTS":     1,
		"SYMBOL_DISTANCE_IN_PERCENTAGE": 2,
	}
)

func (x ProtoOASymbolDistanceType) Enum() *ProtoOASymbolDistanceType {
	p := new(ProtoOASymbolDistanceType)
	*p = x
	return p
}

func (x ProtoOASymbolDistanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOASymbolDistanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[15].Descriptor()
}

func (ProtoOASymbolDistanceType) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[15]
}

func (x ProtoOASymbolDistanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOASymbolDistanceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOASymbolDistanceType(num)
	return nil
}

// Deprecated: Use ProtoOASymbolDistanceType.Descriptor instead.
func (ProtoOASymbolDistanceType) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{15}
}

// * Enum for specifying SWAP calculation type for symbol.
type ProtoOASwapCalculationType int32

const (
	ProtoOASwapCalculationType_POINTS   ProtoOASwapCalculationType = 0 //Specifies type of SWAP computation as points (0)
	ProtoOASwapCalculationType_INTEREST ProtoOASwapCalculationType = 1 //Specifies type of SWAP computation as interest (1, annual, in percent)
)

// Enum value maps for ProtoOASwapCalculationType.
var (
	ProtoOASwapCalculationType_name = map[int32]string{
		0: "POINTS",
		1: "INTEREST",
	}
	ProtoOASwapCalculationType_value = map[string]int32{
		"POINTS":   0,
		"INTEREST": 1,
	}
)

func (x ProtoOASwapCalculationType) Enum() *ProtoOASwapCalculationType {
	p := new(ProtoOASwapCalculationType)
	*p = x
	return p
}

func (x ProtoOASwapCalculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOASwapCalculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[16].Descriptor()
}

func (ProtoOASwapCalculationType) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[16]
}

func (x ProtoOASwapCalculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOASwapCalculationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOASwapCalculationType(num)
	return nil
}

// Deprecated: Use ProtoOASwapCalculationType.Descriptor instead.
func (ProtoOASwapCalculationType) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{16}
}

// * Trendbar period ENUM.
type ProtoOATrendbarPeriod int32

const (
	ProtoOATrendbarPeriod_M1  ProtoOATrendbarPeriod = 1
	ProtoOATrendbarPeriod_M2  ProtoOATrendbarPeriod = 2
	ProtoOATrendbarPeriod_M3  ProtoOATrendbarPeriod = 3
	ProtoOATrendbarPeriod_M4  ProtoOATrendbarPeriod = 4
	ProtoOATrendbarPeriod_M5  ProtoOATrendbarPeriod = 5
	ProtoOATrendbarPeriod_M10 ProtoOATrendbarPeriod = 6
	ProtoOATrendbarPeriod_M15 ProtoOATrendbarPeriod = 7
	ProtoOATrendbarPeriod_M30 ProtoOATrendbarPeriod = 8
	ProtoOATrendbarPeriod_H1  ProtoOATrendbarPeriod = 9
	ProtoOATrendbarPeriod_H4  ProtoOATrendbarPeriod = 10
	ProtoOATrendbarPeriod_H12 ProtoOATrendbarPeriod = 11
	ProtoOATrendbarPeriod_D1  ProtoOATrendbarPeriod = 12
	ProtoOATrendbarPeriod_W1  ProtoOATrendbarPeriod = 13
	ProtoOATrendbarPeriod_MN1 ProtoOATrendbarPeriod = 14
)

// Enum value maps for ProtoOATrendbarPeriod.
var (
	ProtoOATrendbarPeriod_name = map[int32]string{
		1:  "M1",
		2:  "M2",
		3:  "M3",
		4:  "M4",
		5:  "M5",
		6:  "M10",
		7:  "M15",
		8:  "M30",
		9:  "H1",
		10: "H4",
		11: "H12",
		12: "D1",
		13: "W1",
		14: "MN1",
	}
	ProtoOATrendbarPeriod_value = map[string]int32{
		"M1":  1,
		"M2":  2,
		"M3":  3,
		"M4":  4,
		"M5":  5,
		"M10": 6,
		"M15": 7,
		"M30": 8,
		"H1":  9,
		"H4":  10,
		"H12": 11,
		"D1":  12,
		"W1":  13,
		"MN1": 14,
	}
)

func (x ProtoOATrendbarPeriod) Enum() *ProtoOATrendbarPeriod {
	p := new(ProtoOATrendbarPeriod)
	*p = x
	return p
}

func (x ProtoOATrendbarPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOATrendbarPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_OpenApiModelMessages_proto_enumTypes[17].Descriptor()
}

func (ProtoOATrendbarPeriod) Type() protoreflect.EnumType {
	return &file_OpenApiModelMessages_proto_enumTypes[17]
}

func (x ProtoOATrendbarPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOATrendbarPeriod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOATrendbarPeriod(num)
	return nil
}

// Deprecated: Use ProtoOATrendbarPeriod.Descriptor instead.
func (ProtoOATrendbarPeriod) EnumDescriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{17}
}

// * Trading account entity.
type ProtoOATrader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtidTraderAccountId        *int64                             `protobuf:"varint,1,req,name=ctidTraderAccountId" json:"ctidTraderAccountId,omitempty"`                                                                // The unique Trader's Account ID used to match the responses to the Trader's Account.
	Balance                    *int64                             `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`                                                                                        // Current account balance in cents (e.g. If USD 100.00 then value = 10000).
	BalanceVersion             *int64                             `protobuf:"varint,3,opt,name=balanceVersion" json:"balanceVersion,omitempty"`                                                                          // Balance version used to identify the final balance. Increments each time when the trader's account balance is changed.
	ManagerBonus               *int64                             `protobuf:"varint,4,opt,name=managerBonus" json:"managerBonus,omitempty"`                                                                              // Amount of broker's bonus allocated to the account in cents.
	IbBonus                    *int64                             `protobuf:"varint,5,opt,name=ibBonus" json:"ibBonus,omitempty"`                                                                                        // Amount of introducing broker bonus allocated to the account cents.
	NonWithdrawableBonus       *int64                             `protobuf:"varint,6,opt,name=nonWithdrawableBonus" json:"nonWithdrawableBonus,omitempty"`                                                              // Broker's bonus that cannot be withdrew from the account as cash.
	AccessRights               *ProtoOAAccessRights               `protobuf:"varint,7,opt,name=accessRights,enum=messages.ProtoOAAccessRights,def=0" json:"accessRights,omitempty"`                                      // Access rights that an owner has to the account in cTrader platform. See ProtoOAAccessRights for details.
	DepositAssetId             *int64                             `protobuf:"varint,8,opt,name=depositAssetId" json:"depositAssetId,omitempty"`                                                                          // Deposit currency of the account.
	SwapFree                   *bool                              `protobuf:"varint,9,opt,name=swapFree" json:"swapFree,omitempty"`                                                                                      // If TRUE then account is Shariah compliant.
	LeverageInCents            *uint32                            `protobuf:"varint,10,opt,name=leverageInCents" json:"leverageInCents,omitempty"`                                                                       // Account leverage (e.g. If leverage = 1:50 then value = 5000).
	TotalMarginCalculationType *ProtoOATotalMarginCalculationType `protobuf:"varint,11,opt,name=totalMarginCalculationType,enum=messages.ProtoOATotalMarginCalculationType" json:"totalMarginCalculationType,omitempty"` // Margin computation type for the account (MAX, SUM, NET).
	MaxLeverage                *uint32                            `protobuf:"varint,12,opt,name=maxLeverage" json:"maxLeverage,omitempty"`                                                                               // Maximum allowed leverage for the account. Used as validation when a Trader can change leverage value.
	// Deprecated: Marked as deprecated in OpenApiModelMessages.proto.
	FrenchRisk                           *bool                                        `protobuf:"varint,13,opt,name=frenchRisk" json:"frenchRisk,omitempty"`                                                                                                                     // If TRUE then account is AMF compliant.
	TraderLogin                          *int64                                       `protobuf:"varint,14,opt,name=traderLogin" json:"traderLogin,omitempty"`                                                                                                                   // ID of the account that is unique per server (Broker).
	AccountType                          *ProtoOAAccountType                          `protobuf:"varint,15,opt,name=accountType,enum=messages.ProtoOAAccountType,def=0" json:"accountType,omitempty"`                                                                            // Account type: HEDGED, NETTED, etc.
	BrokerName                           *string                                      `protobuf:"bytes,16,opt,name=brokerName" json:"brokerName,omitempty"`                                                                                                                      // Some whitelabel assigned to trader by broker at the moment of account creation.
	RegistrationTimestamp                *int64                                       `protobuf:"varint,17,opt,name=registrationTimestamp" json:"registrationTimestamp,omitempty"`                                                                                               // Unix timestamp of the account registration. Should be used as minimal date in historical data requests.
	IsLimitedRisk                        *bool                                        `protobuf:"varint,18,opt,name=isLimitedRisk" json:"isLimitedRisk,omitempty"`                                                                                                               // If TRUE then account is compliant to use specific margin calculation strategy.
	LimitedRiskMarginCalculationStrategy *ProtoOALimitedRiskMarginCalculationStrategy `protobuf:"varint,19,opt,name=limitedRiskMarginCalculationStrategy,enum=messages.ProtoOALimitedRiskMarginCalculationStrategy,def=0" json:"limitedRiskMarginCalculationStrategy,omitempty"` // Special strategy used in margin calculations for this account (if account isLimitedRisk).
}

// Default values for ProtoOATrader fields.
const (
	Default_ProtoOATrader_AccessRights                         = ProtoOAAccessRights_FULL_ACCESS
	Default_ProtoOATrader_AccountType                          = ProtoOAAccountType_HEDGED
	Default_ProtoOATrader_LimitedRiskMarginCalculationStrategy = ProtoOALimitedRiskMarginCalculationStrategy_ACCORDING_TO_LEVERAGE
)

func (x *ProtoOATrader) Reset() {
	*x = ProtoOATrader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenApiModelMessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOATrader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOATrader) ProtoMessage() {}

func (x *ProtoOATrader) ProtoReflect() protoreflect.Message {
	mi := &file_OpenApiModelMessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOATrader.ProtoReflect.Descriptor instead.
func (*ProtoOATrader) Descriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{0}
}

func (x *ProtoOATrader) GetCtidTraderAccountId() int64 {
	if x != nil && x.CtidTraderAccountId != nil {
		return *x.CtidTraderAccountId
	}
	return 0
}

func (x *ProtoOATrader) GetBalance() int64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *ProtoOATrader) GetBalanceVersion() int64 {
	if x != nil && x.BalanceVersion != nil {
		return *x.BalanceVersion
	}
	return 0
}

func (x *ProtoOATrader) GetManagerBonus() int64 {
	if x != nil && x.ManagerBonus != nil {
		return *x.ManagerBonus
	}
	return 0
}

func (x *ProtoOATrader) GetIbBonus() int64 {
	if x != nil && x.IbBonus != nil {
		return *x.IbBonus
	}
	return 0
}

func (x *ProtoOATrader) GetNonWithdrawableBonus() int64 {
	if x != nil && x.NonWithdrawableBonus != nil {
		return *x.NonWithdrawableBonus
	}
	return 0
}

func (x *ProtoOATrader) GetAccessRights() ProtoOAAccessRights {
	if x != nil && x.AccessRights != nil {
		return *x.AccessRights
	}
	return Default_ProtoOATrader_AccessRights
}

func (x *ProtoOATrader) GetDepositAssetId() int64 {
	if x != nil && x.DepositAssetId != nil {
		return *x.DepositAssetId
	}
	return 0
}

func (x *ProtoOATrader) GetSwapFree() bool {
	if x != nil && x.SwapFree != nil {
		return *x.SwapFree
	}
	return false
}

func (x *ProtoOATrader) GetLeverageInCents() uint32 {
	if x != nil && x.LeverageInCents != nil {
		return *x.LeverageInCents
	}
	return 0
}

func (x *ProtoOATrader) GetTotalMarginCalculationType() ProtoOATotalMarginCalculationType {
	if x != nil && x.TotalMarginCalculationType != nil {
		return *x.TotalMarginCalculationType
	}
	return ProtoOATotalMarginCalculationType_MAX
}

func (x *ProtoOATrader) GetMaxLeverage() uint32 {
	if x != nil && x.MaxLeverage != nil {
		return *x.MaxLeverage
	}
	return 0
}

// Deprecated: Marked as deprecated in OpenApiModelMessages.proto.
func (x *ProtoOATrader) GetFrenchRisk() bool {
	if x != nil && x.FrenchRisk != nil {
		return *x.FrenchRisk
	}
	return false
}

func (x *ProtoOATrader) GetTraderLogin() int64 {
	if x != nil && x.TraderLogin != nil {
		return *x.TraderLogin
	}
	return 0
}

func (x *ProtoOATrader) GetAccountType() ProtoOAAccountType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return Default_ProtoOATrader_AccountType
}

func (x *ProtoOATrader) GetBrokerName() string {
	if x != nil && x.BrokerName != nil {
		return *x.BrokerName
	}
	return ""
}

func (x *ProtoOATrader) GetRegistrationTimestamp() int64 {
	if x != nil && x.RegistrationTimestamp != nil {
		return *x.RegistrationTimestamp
	}
	return 0
}

func (x *ProtoOATrader) GetIsLimitedRisk() bool {
	if x != nil && x.IsLimitedRisk != nil {
		return *x.IsLimitedRisk
	}
	return false
}

func (x *ProtoOATrader) GetLimitedRiskMarginCalculationStrategy() ProtoOALimitedRiskMarginCalculationStrategy {
	if x != nil && x.LimitedRiskMarginCalculationStrategy != nil {
		return *x.LimitedRiskMarginCalculationStrategy
	}
	return Default_ProtoOATrader_LimitedRiskMarginCalculationStrategy
}

// * Lightweight symbol entity.
type ProtoOALightSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolId         *int64  `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                 // The unique identifier of the symbol in specific server environment within cTrader platform. Different brokers might have different IDs.
	SymbolName       *string `protobuf:"bytes,2,opt,name=symbolName" json:"symbolName,omitempty"`              // Name of the symbol (e.g. EUR/USD).
	Enabled          *bool   `protobuf:"varint,3,opt,name=enabled" json:"enabled,omitempty"`                   // If TRUE then symbol is visible for traders.
	BaseAssetId      *int64  `protobuf:"varint,4,opt,name=baseAssetId" json:"baseAssetId,omitempty"`           // Base asset.
	QuoteAssetId     *int64  `protobuf:"varint,5,opt,name=quoteAssetId" json:"quoteAssetId,omitempty"`         // Quote asset.
	SymbolCategoryId *int64  `protobuf:"varint,6,opt,name=symbolCategoryId" json:"symbolCategoryId,omitempty"` // Id of the symbol category used for symbols grouping.
	Description      *string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
}

func (x *ProtoOALightSymbol) Reset() {
	*x = ProtoOALightSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenApiModelMessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOALightSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOALightSymbol) ProtoMessage() {}

func (x *ProtoOALightSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_OpenApiModelMessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOALightSymbol.ProtoReflect.Descriptor instead.
func (*ProtoOALightSymbol) Descriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{1}
}

func (x *ProtoOALightSymbol) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoOALightSymbol) GetSymbolName() string {
	if x != nil && x.SymbolName != nil {
		return *x.SymbolName
	}
	return ""
}

func (x *ProtoOALightSymbol) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ProtoOALightSymbol) GetBaseAssetId() int64 {
	if x != nil && x.BaseAssetId != nil {
		return *x.BaseAssetId
	}
	return 0
}

func (x *ProtoOALightSymbol) GetQuoteAssetId() int64 {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return 0
}

func (x *ProtoOALightSymbol) GetSymbolCategoryId() int64 {
	if x != nil && x.SymbolCategoryId != nil {
		return *x.SymbolCategoryId
	}
	return 0
}

func (x *ProtoOALightSymbol) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// * Trade position entity.
type ProtoOAPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId             *int64                     `protobuf:"varint,1,req,name=positionId" json:"positionId,omitempty"`                                             // The unique ID of the position. Note: trader might have two positions with the same id if positions are taken from accounts from different brokers.
	TradeData              *ProtoOATradeData          `protobuf:"bytes,2,req,name=tradeData" json:"tradeData,omitempty"`                                                // Position details. See ProtoOATradeData for details.
	PositionStatus         *ProtoOAPositionStatus     `protobuf:"varint,3,req,name=positionStatus,enum=messages.ProtoOAPositionStatus" json:"positionStatus,omitempty"` // Current status of the position.
	Swap                   *int64                     `protobuf:"varint,4,req,name=swap" json:"swap,omitempty"`                                                         // Total amount of charged swap on open position.
	Price                  *float64                   `protobuf:"fixed64,5,opt,name=price" json:"price,omitempty"`                                                      // VWAP price of the position based on all executions (orders) linked to the position.
	StopLoss               *float64                   `protobuf:"fixed64,6,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                // Current stop loss price.
	TakeProfit             *float64                   `protobuf:"fixed64,7,opt,name=takeProfit" json:"takeProfit,omitempty"`                                            // Current take profit price.
	UtcLastUpdateTimestamp *int64                     `protobuf:"varint,8,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`                     // Time of the last change of the position, including amend SL/TP of the position, execution of related order, cancel or related order, etc.
	Commission             *int64                     `protobuf:"varint,9,opt,name=commission" json:"commission,omitempty"`                                             // Current unrealized commission related to the position.
	MarginRate             *float64                   `protobuf:"fixed64,10,opt,name=marginRate" json:"marginRate,omitempty"`                                           // Rate for used margin computation. Represented as Base/Deposit.
	MirroringCommission    *int64                     `protobuf:"varint,11,opt,name=mirroringCommission" json:"mirroringCommission,omitempty"`                          // Amount of unrealized commission related to following of strategy provider.
	GuaranteedStopLoss     *bool                      `protobuf:"varint,12,opt,name=guaranteedStopLoss" json:"guaranteedStopLoss,omitempty"`                            // If TRUE then position's stop loss is guaranteedStopLoss.
	MoneyDigits            *uint32                    `protobuf:"varint,15,opt,name=moneyDigits" json:"moneyDigits,omitempty"`
	UsedMargin             *uint64                    `protobuf:"varint,13,opt,name=usedMargin" json:"usedMargin,omitempty"`                                                                     // Amount of margin used for the position in deposit currency.
	StopLossTriggerMethod  *ProtoOAOrderTriggerMethod `protobuf:"varint,14,opt,name=stopLossTriggerMethod,enum=messages.ProtoOAOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop trigger method for SL/TP of the position.
}

// Default values for ProtoOAPosition fields.
const (
	Default_ProtoOAPosition_StopLossTriggerMethod = ProtoOAOrderTriggerMethod_TRADE
)

func (x *ProtoOAPosition) Reset() {
	*x = ProtoOAPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenApiModelMessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOAPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOAPosition) ProtoMessage() {}

func (x *ProtoOAPosition) ProtoReflect() protoreflect.Message {
	mi := &file_OpenApiModelMessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOAPosition.ProtoReflect.Descriptor instead.
func (*ProtoOAPosition) Descriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{2}
}

func (x *ProtoOAPosition) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoOAPosition) GetTradeData() *ProtoOATradeData {
	if x != nil {
		return x.TradeData
	}
	return nil
}

func (x *ProtoOAPosition) GetPositionStatus() ProtoOAPositionStatus {
	if x != nil && x.PositionStatus != nil {
		return *x.PositionStatus
	}
	return ProtoOAPositionStatus_POSITION_STATUS_OPEN
}

func (x *ProtoOAPosition) GetSwap() int64 {
	if x != nil && x.Swap != nil {
		return *x.Swap
	}
	return 0
}

func (x *ProtoOAPosition) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ProtoOAPosition) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoOAPosition) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoOAPosition) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoOAPosition) GetCommission() int64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *ProtoOAPosition) GetMarginRate() float64 {
	if x != nil && x.MarginRate != nil {
		return *x.MarginRate
	}
	return 0
}

func (x *ProtoOAPosition) GetMirroringCommission() int64 {
	if x != nil && x.MirroringCommission != nil {
		return *x.MirroringCommission
	}
	return 0
}

func (x *ProtoOAPosition) GetGuaranteedStopLoss() bool {
	if x != nil && x.GuaranteedStopLoss != nil {
		return *x.GuaranteedStopLoss
	}
	return false
}

func (x *ProtoOAPosition) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

func (x *ProtoOAPosition) GetUsedMargin() uint64 {
	if x != nil && x.UsedMargin != nil {
		return *x.UsedMargin
	}
	return 0
}

func (x *ProtoOAPosition) GetStopLossTriggerMethod() ProtoOAOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoOAPosition_StopLossTriggerMethod
}

// * Position/order trading details entity.
type ProtoOATradeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolId           *int64            `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                                  // The unique identifier of the symbol in specific server environment within cTrader platform. Different brokers might have different IDs.
	Volume             *int64            `protobuf:"varint,2,req,name=volume" json:"volume,omitempty"`                                      // Volume in cents.
	TradeSide          *ProtoOATradeSide `protobuf:"varint,3,req,name=tradeSide,enum=messages.ProtoOATradeSide" json:"tradeSide,omitempty"` // Buy, Sell.
	OpenTimestamp      *int64            `protobuf:"varint,4,opt,name=openTimestamp" json:"openTimestamp,omitempty"`                        // Time when position was opened or order was created.
	Label              *string           `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`                                         // Text label specified during order request.
	GuaranteedStopLoss *bool             `protobuf:"varint,6,opt,name=guaranteedStopLoss" json:"guaranteedStopLoss,omitempty"`              // If TRUE then position/order stop loss is guaranteedStopLoss.
}

func (x *ProtoOATradeData) Reset() {
	*x = ProtoOATradeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenApiModelMessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOATradeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOATradeData) ProtoMessage() {}

func (x *ProtoOATradeData) ProtoReflect() protoreflect.Message {
	mi := &file_OpenApiModelMessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOATradeData.ProtoReflect.Descriptor instead.
func (*ProtoOATradeData) Descriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{3}
}

func (x *ProtoOATradeData) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoOATradeData) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoOATradeData) GetTradeSide() ProtoOATradeSide {
	if x != nil && x.TradeSide != nil {
		return *x.TradeSide
	}
	return ProtoOATradeSide_BUY
}

func (x *ProtoOATradeData) GetOpenTimestamp() int64 {
	if x != nil && x.OpenTimestamp != nil {
		return *x.OpenTimestamp
	}
	return 0
}

func (x *ProtoOATradeData) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ProtoOATradeData) GetGuaranteedStopLoss() bool {
	if x != nil && x.GuaranteedStopLoss != nil {
		return *x.GuaranteedStopLoss
	}
	return false
}

// * Trade order entity.
type ProtoOAOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId                *int64                     `protobuf:"varint,1,req,name=orderId" json:"orderId,omitempty"`                                                                    // The unique ID of the order. Note: trader might have two orders with the same id if orders are taken from accounts from different brokers.
	TradeData              *ProtoOATradeData          `protobuf:"bytes,2,req,name=tradeData" json:"tradeData,omitempty"`                                                                 // Detailed trader data.
	OrderType              *ProtoOAOrderType          `protobuf:"varint,3,req,name=orderType,enum=messages.ProtoOAOrderType" json:"orderType,omitempty"`                                 // Order type.
	OrderStatus            *ProtoOAOrderStatus        `protobuf:"varint,4,req,name=orderStatus,enum=messages.ProtoOAOrderStatus" json:"orderStatus,omitempty"`                           // Order status.
	ExpirationTimestamp    *int64                     `protobuf:"varint,6,opt,name=expirationTimestamp" json:"expirationTimestamp,omitempty"`                                            // If the order has time in force GTD then expiration is specified.
	ExecutionPrice         *float64                   `protobuf:"fixed64,7,opt,name=executionPrice" json:"executionPrice,omitempty"`                                                     // Price at which an order was executed. For order with FILLED status.
	ExecutedVolume         *int64                     `protobuf:"varint,8,opt,name=executedVolume" json:"executedVolume,omitempty"`                                                      // Part of the volume that was filled.
	UtcLastUpdateTimestamp *int64                     `protobuf:"varint,9,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`                                      // Timestamp of the last update of the order.
	BaseSlippagePrice      *float64                   `protobuf:"fixed64,10,opt,name=baseSlippagePrice" json:"baseSlippagePrice,omitempty"`                                              // Used for Market Range order with combination of slippageInPoints to specify price range were order can be executed.
	SlippageInPoints       *int64                     `protobuf:"varint,11,opt,name=slippageInPoints" json:"slippageInPoints,omitempty"`                                                 // Used for Market Range and STOP_LIMIT orders to to specify price range were order can be executed.
	ClosingOrder           *bool                      `protobuf:"varint,12,opt,name=closingOrder" json:"closingOrder,omitempty"`                                                         // If TRUE then the order is closing part of whole position. Must have specified positionId.
	LimitPrice             *float64                   `protobuf:"fixed64,13,opt,name=limitPrice" json:"limitPrice,omitempty"`                                                            // Valid only for LIMIT orders.
	StopPrice              *float64                   `protobuf:"fixed64,14,opt,name=stopPrice" json:"stopPrice,omitempty"`                                                              // Valid only for STOP and STOP_LIMIT orders.
	StopLoss               *float64                   `protobuf:"fixed64,15,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                                // Absolute stopLoss price.
	TakeProfit             *float64                   `protobuf:"fixed64,16,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                            // Absolute takeProfit price.
	ClientOrderId          *string                    `protobuf:"bytes,17,opt,name=clientOrderId" json:"clientOrderId,omitempty"`                                                        // Optional ClientOrderId. Max Length = 50 chars.
	TimeInForce            *ProtoOATimeInForce        `protobuf:"varint,18,opt,name=timeInForce,enum=messages.ProtoOATimeInForce,def=3" json:"timeInForce,omitempty"`                    // Order's time in force. Depends on order type.
	PositionId             *int64                     `protobuf:"varint,19,opt,name=positionId" json:"positionId,omitempty"`                                                             // ID of the position linked to the order (e.g. closing order, order that increase volume of a specific position, etc.).
	RelativeStopLoss       *int64                     `protobuf:"varint,20,opt,name=relativeStopLoss" json:"relativeStopLoss,omitempty"`                                                 // Relative stopLoss that can be specified instead of absolute as one. Specified in 1/100_000 of unit of a price. For BUY stopLoss = entryPrice - relativeStopLoss, for SELL stopLoss = entryPrice + relativeStopLoss.
	RelativeTakeProfit     *int64                     `protobuf:"varint,21,opt,name=relativeTakeProfit" json:"relativeTakeProfit,omitempty"`                                             // Relative takeProfit that can be specified instead of absolute one. Specified in 1/100_000 of unit of a price. ForBUY takeProfit = entryPrice + relativeTakeProfit, for SELL takeProfit = entryPrice - relativeTakeProfit.
	IsStopOut              *bool                      `protobuf:"varint,22,opt,name=isStopOut" json:"isStopOut,omitempty"`                                                               // If TRUE then order was stopped out from server side.
	TrailingStopLoss       *bool                      `protobuf:"varint,23,opt,name=trailingStopLoss" json:"trailingStopLoss,omitempty"`                                                 // If TRUE then order is trailingStopLoss. Valid for STOP_LOSS_TAKE_PROFIT order.
	StopTriggerMethod      *ProtoOAOrderTriggerMethod `protobuf:"varint,24,opt,name=stopTriggerMethod,enum=messages.ProtoOAOrderTriggerMethod,def=1" json:"stopTriggerMethod,omitempty"` // Trigger method for the order. Valid only for STOP and STOP_LIMIT orders.
}

// Default values for ProtoOAOrder fields.
const (
	Default_ProtoOAOrder_TimeInForce       = ProtoOATimeInForce_IMMEDIATE_OR_CANCEL
	Default_ProtoOAOrder_StopTriggerMethod = ProtoOAOrderTriggerMethod_TRADE
)

func (x *ProtoOAOrder) Reset() {
	*x = ProtoOAOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenApiModelMessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOAOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOAOrder) ProtoMessage() {}

func (x *ProtoOAOrder) ProtoReflect() protoreflect.Message {
	mi := &file_OpenApiModelMessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOAOrder.ProtoReflect.Descriptor instead.
func (*ProtoOAOrder) Descriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{4}
}

func (x *ProtoOAOrder) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ProtoOAOrder) GetTradeData() *ProtoOATradeData {
	if x != nil {
		return x.TradeData
	}
	return nil
}

func (x *ProtoOAOrder) GetOrderType() ProtoOAOrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ProtoOAOrderType_MARKET
}

func (x *ProtoOAOrder) GetOrderStatus() ProtoOAOrderStatus {
	if x != nil && x.OrderStatus != nil {
		return *x.OrderStatus
	}
	return ProtoOAOrderStatus_ORDER_STATUS_ACCEPTED
}

func (x *ProtoOAOrder) GetExpirationTimestamp() int64 {
	if x != nil && x.ExpirationTimestamp != nil {
		return *x.ExpirationTimestamp
	}
	return 0
}

func (x *ProtoOAOrder) GetExecutionPrice() float64 {
	if x != nil && x.ExecutionPrice != nil {
		return *x.ExecutionPrice
	}
	return 0
}

func (x *ProtoOAOrder) GetExecutedVolume() int64 {
	if x != nil && x.ExecutedVolume != nil {
		return *x.ExecutedVolume
	}
	return 0
}

func (x *ProtoOAOrder) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoOAOrder) GetBaseSlippagePrice() float64 {
	if x != nil && x.BaseSlippagePrice != nil {
		return *x.BaseSlippagePrice
	}
	return 0
}

func (x *ProtoOAOrder) GetSlippageInPoints() int64 {
	if x != nil && x.SlippageInPoints != nil {
		return *x.SlippageInPoints
	}
	return 0
}

func (x *ProtoOAOrder) GetClosingOrder() bool {
	if x != nil && x.ClosingOrder != nil {
		return *x.ClosingOrder
	}
	return false
}

func (x *ProtoOAOrder) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *ProtoOAOrder) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *ProtoOAOrder) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoOAOrder) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoOAOrder) GetClientOrderId() string {
	if x != nil && x.ClientOrderId != nil {
		return *x.ClientOrderId
	}
	return ""
}

func (x *ProtoOAOrder) GetTimeInForce() ProtoOATimeInForce {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return Default_ProtoOAOrder_TimeInForce
}

func (x *ProtoOAOrder) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoOAOrder) GetRelativeStopLoss() int64 {
	if x != nil && x.RelativeStopLoss != nil {
		return *x.RelativeStopLoss
	}
	return 0
}

func (x *ProtoOAOrder) GetRelativeTakeProfit() int64 {
	if x != nil && x.RelativeTakeProfit != nil {
		return *x.RelativeTakeProfit
	}
	return 0
}

func (x *ProtoOAOrder) GetIsStopOut() bool {
	if x != nil && x.IsStopOut != nil {
		return *x.IsStopOut
	}
	return false
}

func (x *ProtoOAOrder) GetTrailingStopLoss() bool {
	if x != nil && x.TrailingStopLoss != nil {
		return *x.TrailingStopLoss
	}
	return false
}

func (x *ProtoOAOrder) GetStopTriggerMethod() ProtoOAOrderTriggerMethod {
	if x != nil && x.StopTriggerMethod != nil {
		return *x.StopTriggerMethod
	}
	return Default_ProtoOAOrder_StopTriggerMethod
}

// * Trading symbol entity.
type ProtoOASymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolId                *int64                      `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                                                                       // The unique identifier of the symbol in specific server environment within cTrader platform. Different servers have different IDs.
	Digits                  *int32                      `protobuf:"varint,2,req,name=digits" json:"digits,omitempty"`                                                                           // Number of price digits to be displayed.
	PipPosition             *int32                      `protobuf:"varint,3,req,name=pipPosition" json:"pipPosition,omitempty"`                                                                 // Pip position on digits.
	EnableShortSelling      *bool                       `protobuf:"varint,4,opt,name=enableShortSelling" json:"enableShortSelling,omitempty"`                                                   // If TRUE then the short selling with the symbol is enabled.
	GuaranteedStopLoss      *bool                       `protobuf:"varint,5,opt,name=guaranteedStopLoss" json:"guaranteedStopLoss,omitempty"`                                                   // If TRUE then setting of guaranteedStopLoss is available for limited risk accounts.
	SwapRollover3Days       *ProtoOADayOfWeek           `protobuf:"varint,6,opt,name=swapRollover3Days,enum=messages.ProtoOADayOfWeek,def=1" json:"swapRollover3Days,omitempty"`                // Day of the week when SWAP charge amount will be tripled. Doesn't impact Rollover Commission.
	SwapLong                *float64                    `protobuf:"fixed64,7,opt,name=swapLong" json:"swapLong,omitempty"`                                                                      // SWAP charge for long positions.
	SwapShort               *float64                    `protobuf:"fixed64,8,opt,name=swapShort" json:"swapShort,omitempty"`                                                                    // SWAP charge for short positions.
	MaxVolume               *int64                      `protobuf:"varint,9,opt,name=maxVolume" json:"maxVolume,omitempty"`                                                                     // Maximum allowed volume in cents for an order with a symbol.
	MinVolume               *int64                      `protobuf:"varint,10,opt,name=minVolume" json:"minVolume,omitempty"`                                                                    // Minimum allowed volume in cents for an order with a symbol.
	StepVolume              *int64                      `protobuf:"varint,11,opt,name=stepVolume" json:"stepVolume,omitempty"`                                                                  // Step of the volume in cents for an order.
	MaxExposure             *uint64                     `protobuf:"varint,12,opt,name=maxExposure" json:"maxExposure,omitempty"`                                                                // Value of max exposure per symbol, per account. Blocks execution if breached.
	Schedule                []*ProtoOAInterval          `protobuf:"bytes,13,rep,name=schedule" json:"schedule,omitempty"`                                                                       // Symbol trading interval, specified in seconds starting from SUNDAY 00:00 in specified time zone.
	Commission              *int64                      `protobuf:"varint,14,req,name=commission" json:"commission,omitempty"`                                                                  // Commission base amount. Total commission depends on commissionType.
	CommissionType          *ProtoOACommissionType      `protobuf:"varint,15,opt,name=commissionType,enum=messages.ProtoOACommissionType,def=1" json:"commissionType,omitempty"`                // Commission type. See ProtoOACommissionType for details.
	SlDistance              *uint32                     `protobuf:"varint,16,opt,name=slDistance" json:"slDistance,omitempty"`                                                                  // Minimum allowed distance between stop loss and current market price.
	TpDistance              *uint32                     `protobuf:"varint,17,opt,name=tpDistance" json:"tpDistance,omitempty"`                                                                  // Minimum allowed distance between take profit and current market price.
	GslDistance             *uint32                     `protobuf:"varint,18,opt,name=gslDistance" json:"gslDistance,omitempty"`                                                                // Minimum allowed distance between guaranteed stop loss and current market price.
	GslCharge               *int64                      `protobuf:"varint,19,opt,name=gslCharge" json:"gslCharge,omitempty"`                                                                    // Guaranteed stop loss fee.
	DistanceSetIn           *ProtoOASymbolDistanceType  `protobuf:"varint,20,opt,name=distanceSetIn,enum=messages.ProtoOASymbolDistanceType,def=1" json:"distanceSetIn,omitempty"`              // Unit of distance measure for slDistance, tpDistance, gslDistance.
	MinCommission           *int64                      `protobuf:"varint,21,opt,name=minCommission" json:"minCommission,omitempty"`                                                            // Minimum commission amount per trade.
	MinCommissionType       *ProtoOAMinCommissionType   `protobuf:"varint,22,opt,name=minCommissionType,enum=messages.ProtoOAMinCommissionType,def=1" json:"minCommissionType,omitempty"`       // Minimum commission Type. See ProtoOAMinCommissionType for details.
	MinCommissionAsset      *string                     `protobuf:"bytes,23,opt,name=minCommissionAsset,def=USD" json:"minCommissionAsset,omitempty"`                                           // Currency for minimum commission. (USD or quote currency).
	RolloverCommission      *int64                      `protobuf:"varint,24,opt,name=rolloverCommission" json:"rolloverCommission,omitempty"`                                                  // Amount of commission per trade for Shariah Compliant accounts in deposit currency (swapFree = TRUE).
	SkipRolloverDays        *int32                      `protobuf:"varint,25,opt,name=skipRolloverDays" json:"skipRolloverDays,omitempty"`                                                      // Initial period before the first rolloverCommission will be charged on the account.
	ScheduleTimeZone        *string                     `protobuf:"bytes,26,opt,name=scheduleTimeZone" json:"scheduleTimeZone,omitempty"`                                                       // Time zone for the symbol trading intervals.
	TradingMode             *ProtoOATradingMode         `protobuf:"varint,27,opt,name=tradingMode,enum=messages.ProtoOATradingMode,def=0" json:"tradingMode,omitempty"`                         // Rules for trading with the symbol. See ProtoOATradingMode for details.
	RolloverCommission3Days *ProtoOADayOfWeek           `protobuf:"varint,28,opt,name=rolloverCommission3Days,enum=messages.ProtoOADayOfWeek,def=1" json:"rolloverCommission3Days,omitempty"`   //Day of the week (in UTC) when Administrative Fee charge amount will be tripled. Applied only if RolloverChargePeriod = 0 or 1
	SwapCalculationType     *ProtoOASwapCalculationType `protobuf:"varint,29,opt,name=swapCalculationType,enum=messages.ProtoOASwapCalculationType,def=0" json:"swapCalculationType,omitempty"` //Specifies type of SWAP computation as points (0) or interest (1, annual, in percent)
	LotSize                 *int64                      `protobuf:"varint,30,opt,name=lotSize" json:"lotSize,omitempty"`                                                                        //Lot size of the Symbol (in cents)
}

// Default values for ProtoOASymbol fields.
const (
	Default_ProtoOASymbol_SwapRollover3Days       = ProtoOADayOfWeek_MONDAY
	Default_ProtoOASymbol_CommissionType          = ProtoOACommissionType_USD_PER_MIL_USD
	Default_ProtoOASymbol_DistanceSetIn           = ProtoOASymbolDistanceType_SYMBOL_DISTANCE_IN_POINTS
	Default_ProtoOASymbol_MinCommissionType       = ProtoOAMinCommissionType_CURRENCY
	Default_ProtoOASymbol_MinCommissionAsset      = string("USD")
	Default_ProtoOASymbol_TradingMode             = ProtoOATradingMode_ENABLED
	Default_ProtoOASymbol_RolloverCommission3Days = ProtoOADayOfWeek_MONDAY
	Default_ProtoOASymbol_SwapCalculationType     = ProtoOASwapCalculationType_POINTS
)

func (x *ProtoOASymbol) Reset() {
	*x = ProtoOASymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenApiModelMessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOASymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOASymbol) ProtoMessage() {}

func (x *ProtoOASymbol) ProtoReflect() protoreflect.Message {
	mi := &file_OpenApiModelMessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOASymbol.ProtoReflect.Descriptor instead.
func (*ProtoOASymbol) Descriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{5}
}

func (x *ProtoOASymbol) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoOASymbol) GetDigits() int32 {
	if x != nil && x.Digits != nil {
		return *x.Digits
	}
	return 0
}

func (x *ProtoOASymbol) GetPipPosition() int32 {
	if x != nil && x.PipPosition != nil {
		return *x.PipPosition
	}
	return 0
}

func (x *ProtoOASymbol) GetEnableShortSelling() bool {
	if x != nil && x.EnableShortSelling != nil {
		return *x.EnableShortSelling
	}
	return false
}

func (x *ProtoOASymbol) GetGuaranteedStopLoss() bool {
	if x != nil && x.GuaranteedStopLoss != nil {
		return *x.GuaranteedStopLoss
	}
	return false
}

func (x *ProtoOASymbol) GetSwapRollover3Days() ProtoOADayOfWeek {
	if x != nil && x.SwapRollover3Days != nil {
		return *x.SwapRollover3Days
	}
	return Default_ProtoOASymbol_SwapRollover3Days
}

func (x *ProtoOASymbol) GetSwapLong() float64 {
	if x != nil && x.SwapLong != nil {
		return *x.SwapLong
	}
	return 0
}

func (x *ProtoOASymbol) GetSwapShort() float64 {
	if x != nil && x.SwapShort != nil {
		return *x.SwapShort
	}
	return 0
}

func (x *ProtoOASymbol) GetMaxVolume() int64 {
	if x != nil && x.MaxVolume != nil {
		return *x.MaxVolume
	}
	return 0
}

func (x *ProtoOASymbol) GetMinVolume() int64 {
	if x != nil && x.MinVolume != nil {
		return *x.MinVolume
	}
	return 0
}

func (x *ProtoOASymbol) GetStepVolume() int64 {
	if x != nil && x.StepVolume != nil {
		return *x.StepVolume
	}
	return 0
}

func (x *ProtoOASymbol) GetMaxExposure() uint64 {
	if x != nil && x.MaxExposure != nil {
		return *x.MaxExposure
	}
	return 0
}

func (x *ProtoOASymbol) GetSchedule() []*ProtoOAInterval {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ProtoOASymbol) GetCommission() int64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *ProtoOASymbol) GetCommissionType() ProtoOACommissionType {
	if x != nil && x.CommissionType != nil {
		return *x.CommissionType
	}
	return Default_ProtoOASymbol_CommissionType
}

func (x *ProtoOASymbol) GetSlDistance() uint32 {
	if x != nil && x.SlDistance != nil {
		return *x.SlDistance
	}
	return 0
}

func (x *ProtoOASymbol) GetTpDistance() uint32 {
	if x != nil && x.TpDistance != nil {
		return *x.TpDistance
	}
	return 0
}

func (x *ProtoOASymbol) GetGslDistance() uint32 {
	if x != nil && x.GslDistance != nil {
		return *x.GslDistance
	}
	return 0
}

func (x *ProtoOASymbol) GetGslCharge() int64 {
	if x != nil && x.GslCharge != nil {
		return *x.GslCharge
	}
	return 0
}

func (x *ProtoOASymbol) GetDistanceSetIn() ProtoOASymbolDistanceType {
	if x != nil && x.DistanceSetIn != nil {
		return *x.DistanceSetIn
	}
	return Default_ProtoOASymbol_DistanceSetIn
}

func (x *ProtoOASymbol) GetMinCommission() int64 {
	if x != nil && x.MinCommission != nil {
		return *x.MinCommission
	}
	return 0
}

func (x *ProtoOASymbol) GetMinCommissionType() ProtoOAMinCommissionType {
	if x != nil && x.MinCommissionType != nil {
		return *x.MinCommissionType
	}
	return Default_ProtoOASymbol_MinCommissionType
}

func (x *ProtoOASymbol) GetMinCommissionAsset() string {
	if x != nil && x.MinCommissionAsset != nil {
		return *x.MinCommissionAsset
	}
	return Default_ProtoOASymbol_MinCommissionAsset
}

func (x *ProtoOASymbol) GetRolloverCommission() int64 {
	if x != nil && x.RolloverCommission != nil {
		return *x.RolloverCommission
	}
	return 0
}

func (x *ProtoOASymbol) GetSkipRolloverDays() int32 {
	if x != nil && x.SkipRolloverDays != nil {
		return *x.SkipRolloverDays
	}
	return 0
}

func (x *ProtoOASymbol) GetScheduleTimeZone() string {
	if x != nil && x.ScheduleTimeZone != nil {
		return *x.ScheduleTimeZone
	}
	return ""
}

func (x *ProtoOASymbol) GetTradingMode() ProtoOATradingMode {
	if x != nil && x.TradingMode != nil {
		return *x.TradingMode
	}
	return Default_ProtoOASymbol_TradingMode
}

func (x *ProtoOASymbol) GetRolloverCommission3Days() ProtoOADayOfWeek {
	if x != nil && x.RolloverCommission3Days != nil {
		return *x.RolloverCommission3Days
	}
	return Default_ProtoOASymbol_RolloverCommission3Days
}

func (x *ProtoOASymbol) GetSwapCalculationType() ProtoOASwapCalculationType {
	if x != nil && x.SwapCalculationType != nil {
		return *x.SwapCalculationType
	}
	return Default_ProtoOASymbol_SwapCalculationType
}

func (x *ProtoOASymbol) GetLotSize() int64 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

// * Symbol trading session entity.
type ProtoOAInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartSecond *uint32 `protobuf:"varint,3,req,name=startSecond" json:"startSecond,omitempty"` // Interval start, specified in seconds starting from SUNDAY 00:00 in specified time zone (inclusive to the interval).
	EndSecond   *uint32 `protobuf:"varint,4,req,name=endSecond" json:"endSecond,omitempty"`     // Interval end, specified in seconds starting from SUNDAY 00:00 in specified time zone (exclusive from the interval).
}

func (x *ProtoOAInterval) Reset() {
	*x = ProtoOAInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenApiModelMessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOAInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOAInterval) ProtoMessage() {}

func (x *ProtoOAInterval) ProtoReflect() protoreflect.Message {
	mi := &file_OpenApiModelMessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOAInterval.ProtoReflect.Descriptor instead.
func (*ProtoOAInterval) Descriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{6}
}

func (x *ProtoOAInterval) GetStartSecond() uint32 {
	if x != nil && x.StartSecond != nil {
		return *x.StartSecond
	}
	return 0
}

func (x *ProtoOAInterval) GetEndSecond() uint32 {
	if x != nil && x.EndSecond != nil {
		return *x.EndSecond
	}
	return 0
}

// * Historical Trendbar entity.
type ProtoOATrendbar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume                *int64                 `protobuf:"varint,3,req,name=volume" json:"volume,omitempty"`                                           // Bar volume in ticks.
	Period                *ProtoOATrendbarPeriod `protobuf:"varint,4,opt,name=period,enum=messages.ProtoOATrendbarPeriod,def=1" json:"period,omitempty"` // Bar period.
	Low                   *int64                 `protobuf:"varint,5,opt,name=low" json:"low,omitempty"`                                                 // Low price of the bar.
	DeltaOpen             *uint64                `protobuf:"varint,6,opt,name=deltaOpen" json:"deltaOpen,omitempty"`                                     // Delta between open and low price. open = low + deltaOpen.
	DeltaClose            *uint64                `protobuf:"varint,7,opt,name=deltaClose" json:"deltaClose,omitempty"`                                   // Delta between close and low price. close = low + deltaClose.
	DeltaHigh             *uint64                `protobuf:"varint,8,opt,name=deltaHigh" json:"deltaHigh,omitempty"`                                     // Delta between high and low price. high = low + deltaHigh.
	UtcTimestampInMinutes *uint32                `protobuf:"varint,9,opt,name=utcTimestampInMinutes" json:"utcTimestampInMinutes,omitempty"`             // Timestamp of the bar. Equal to the timestamp of the open tick.
}

// Default values for ProtoOATrendbar fields.
const (
	Default_ProtoOATrendbar_Period = ProtoOATrendbarPeriod_M1
)

func (x *ProtoOATrendbar) Reset() {
	*x = ProtoOATrendbar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenApiModelMessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOATrendbar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOATrendbar) ProtoMessage() {}

func (x *ProtoOATrendbar) ProtoReflect() protoreflect.Message {
	mi := &file_OpenApiModelMessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOATrendbar.ProtoReflect.Descriptor instead.
func (*ProtoOATrendbar) Descriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{7}
}

func (x *ProtoOATrendbar) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoOATrendbar) GetPeriod() ProtoOATrendbarPeriod {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return Default_ProtoOATrendbar_Period
}

func (x *ProtoOATrendbar) GetLow() int64 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

func (x *ProtoOATrendbar) GetDeltaOpen() uint64 {
	if x != nil && x.DeltaOpen != nil {
		return *x.DeltaOpen
	}
	return 0
}

func (x *ProtoOATrendbar) GetDeltaClose() uint64 {
	if x != nil && x.DeltaClose != nil {
		return *x.DeltaClose
	}
	return 0
}

func (x *ProtoOATrendbar) GetDeltaHigh() uint64 {
	if x != nil && x.DeltaHigh != nil {
		return *x.DeltaHigh
	}
	return 0
}

func (x *ProtoOATrendbar) GetUtcTimestampInMinutes() uint32 {
	if x != nil && x.UtcTimestampInMinutes != nil {
		return *x.UtcTimestampInMinutes
	}
	return 0
}

// * Asset entity.
type ProtoOAAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId     *int64  `protobuf:"varint,1,req,name=assetId" json:"assetId,omitempty"`        // The unique asset ID.
	Name        *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`               // The asset name.
	DisplayName *string `protobuf:"bytes,3,opt,name=displayName" json:"displayName,omitempty"` // User friendly name.
}

func (x *ProtoOAAsset) Reset() {
	*x = ProtoOAAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenApiModelMessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOAAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOAAsset) ProtoMessage() {}

func (x *ProtoOAAsset) ProtoReflect() protoreflect.Message {
	mi := &file_OpenApiModelMessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOAAsset.ProtoReflect.Descriptor instead.
func (*ProtoOAAsset) Descriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{8}
}

func (x *ProtoOAAsset) GetAssetId() int64 {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return 0
}

func (x *ProtoOAAsset) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoOAAsset) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

type ProtoOAArchivedSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolId               *int64  `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`
	Name                   *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	UtcLastUpdateTimestamp *int64  `protobuf:"varint,3,req,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`
	Description            *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (x *ProtoOAArchivedSymbol) Reset() {
	*x = ProtoOAArchivedSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenApiModelMessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOAArchivedSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOAArchivedSymbol) ProtoMessage() {}

func (x *ProtoOAArchivedSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_OpenApiModelMessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOAArchivedSymbol.ProtoReflect.Descriptor instead.
func (*ProtoOAArchivedSymbol) Descriptor() ([]byte, []int) {
	return file_OpenApiModelMessages_proto_rawDescGZIP(), []int{9}
}

func (x *ProtoOAArchivedSymbol) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoOAArchivedSymbol) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoOAArchivedSymbol) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoOAArchivedSymbol) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

var File_OpenApiModelMessages_proto protoreflect.FileDescriptor

var file_OpenApiModelMessages_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xef, 0x07, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4f, 0x41, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x74, 0x69, 0x64,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x13, 0x63, 0x74, 0x69, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x62, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x69, 0x62, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x4e,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x3a, 0x0b, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72,
	0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72,
	0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x43, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x1a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x41, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x66,
	0x72, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x48, 0x45, 0x44, 0x47, 0x45, 0x44, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x69, 0x73, 0x6b, 0x12, 0xa0, 0x01, 0x0a, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x69,
	0x73, 0x6b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x15, 0x41, 0x43, 0x43,
	0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41,
	0x47, 0x45, 0x52, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4f, 0x41, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x05, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x41, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4f, 0x41, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x77, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x60, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4f, 0x41, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x15, 0x73,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x41, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65,
	0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x22, 0xa9, 0x08, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4f, 0x41, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6c, 0x69,
	0x70, 0x70, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6c,
	0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4f, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x3a, 0x13, 0x49,
	0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x41, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x11, 0x73, 0x74,
	0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22,
	0xc6, 0x0b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x33, 0x44, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x3a, 0x06,
	0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x52, 0x11, 0x73, 0x77, 0x61, 0x70, 0x52, 0x6f, 0x6c, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x33, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x61,
	0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x77, 0x61,
	0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x0f, 0x55, 0x53, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4c, 0x5f, 0x55,
	0x53, 0x44, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x73, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x73, 0x6c, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x73, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x73, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x19,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x4d, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x08, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x12, 0x6d, 0x69,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x55, 0x53, 0x44, 0x52, 0x12, 0x6d, 0x69, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x6f, 0x6c,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x44,
	0x61, 0x79, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x07, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x5c, 0x0a, 0x17, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x33, 0x44, 0x61, 0x79, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4f, 0x41, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x3a, 0x06, 0x4d,
	0x4f, 0x4e, 0x44, 0x41, 0x59, 0x52, 0x17, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x33, 0x44, 0x61, 0x79, 0x73, 0x12, 0x5e,
	0x0a, 0x13, 0x73, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x53, 0x77,
	0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x06, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x52, 0x13, 0x73, 0x77, 0x61, 0x70, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x41, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x62, 0x61, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x62,
	0x61, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x02, 0x4d, 0x31, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4f,
	0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x69, 0x67,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x69,
	0x67, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x75, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49,
	0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x41, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4f, 0x41, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0xef, 0x16, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xb4, 0x10, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb5, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xb6, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb7, 0x10, 0x12, 0x19, 0x0a, 0x14, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0xb8, 0x10, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4f, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb9,
	0x10, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x4e, 0x45,
	0x57, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xba, 0x10, 0x12, 0x27,
	0x0a, 0x22, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0xbb, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4f, 0x41, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xbc, 0x10, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0xbd, 0x10, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4f, 0x41, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x4c, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xbe, 0x10, 0x12, 0x20, 0x0a,
	0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xbf, 0x10, 0x12,
	0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc0, 0x10, 0x12, 0x1c, 0x0a,
	0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xc1, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x53, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc2, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x53, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xc3, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x42,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc4, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x42,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xc5, 0x10, 0x12, 0x28, 0x0a, 0x23, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x53, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0xc6, 0x10, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f,
	0x41, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xc7, 0x10, 0x12,
	0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0xc8, 0x10, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc9, 0x10, 0x12, 0x18, 0x0a,
	0x13, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0xca, 0x10, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4f, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xcb, 0x10, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xcc, 0x10, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4f, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x10, 0xcd, 0x10, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0xce, 0x10, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0xcf, 0x10, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4f, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x50, 0x4f,
	0x54, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xd0, 0x10, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd1, 0x10, 0x12, 0x23,
	0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xd2, 0x10, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f,
	0x53, 0x50, 0x4f, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xd3, 0x10, 0x12, 0x1f, 0x0a,
	0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xd4, 0x10, 0x12, 0x1b,
	0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd5, 0x10, 0x12, 0x1b, 0x0a, 0x16, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xd6, 0x10, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x4c,
	0x49, 0x56, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0xd7, 0x10, 0x12, 0x2b, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45,
	0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd8, 0x10,
	0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x42, 0x41, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd9,
	0x10, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x42, 0x41, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10,
	0xda, 0x10, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x45,
	0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0xdb, 0x10, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f,
	0x41, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xdc, 0x10, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xdd, 0x10, 0x12, 0x17, 0x0a, 0x12,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xde, 0x10, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f,
	0x41, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xdf, 0x10, 0x12,
	0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x43, 0x41, 0x53, 0x48,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xe0, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe1, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xe2, 0x10, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xe3, 0x10, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xe4, 0x10,
	0x12, 0x2e, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe5, 0x10,
	0x12, 0x2e, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xe6, 0x10,
	0x12, 0x2b, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x43, 0x54, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x59,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe7, 0x10, 0x12, 0x2b, 0x0a,
	0x26, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x54,
	0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xe8, 0x10, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe9, 0x10, 0x12, 0x22,
	0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10,
	0xea, 0x10, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x44,
	0x45, 0x50, 0x54, 0x48, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xeb, 0x10, 0x12, 0x28, 0x0a,
	0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x53,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xec, 0x10, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x44, 0x45,
	0x50, 0x54, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xed,
	0x10, 0x12, 0x2a, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x55, 0x4e,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f,
	0x51, 0x55, 0x4f, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xee, 0x10, 0x12, 0x2a, 0x0a,
	0x25, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xef, 0x10, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xf0, 0x10, 0x12, 0x21, 0x0a, 0x1c,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xf1, 0x10, 0x12,
	0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xf2,
	0x10, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xf3, 0x10, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xf4, 0x10, 0x12, 0x29, 0x0a, 0x24, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x42, 0x41, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x10, 0xf5, 0x10, 0x12, 0x2b, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4f, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x4c,
	0x49, 0x56, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xf6, 0x10, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f,
	0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xf7, 0x10, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4f, 0x41, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xf8, 0x10, 0x12, 0x24, 0x0a, 0x1f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xf9,
	0x10, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x4d, 0x41,
	0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0xfa, 0x10, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4f, 0x41, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xfb, 0x10, 0x12,
	0x27, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x4d, 0x41, 0x52, 0x47,
	0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xfc, 0x10, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xfd, 0x10, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xfe, 0x10, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xff, 0x10, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x10, 0x80, 0x11, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4f, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x81, 0x11, 0x12, 0x26,
	0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x10, 0x82, 0x11, 0x12, 0x2a, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4f, 0x41, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0x83, 0x11, 0x12, 0x2a, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x41, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x84, 0x11, 0x2a, 0x54,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x10, 0x03, 0x2a, 0x3e, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x45, 0x54, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45,
	0x44, 0x47, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x54, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x42, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x5e, 0x0a, 0x2b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f,
	0x41, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f,
	0x5f, 0x47, 0x53, 0x4c, 0x10, 0x01, 0x2a, 0x85, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4f, 0x41, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x25,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x5b, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x50, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45,
	0x10, 0x04, 0x2a, 0x70, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x06, 0x2a, 0x99, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x2a, 0x7d, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54,
	0x49, 0x4c, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x4f,
	0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x05, 0x2a,
	0x78, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57,
	0x65, 0x65, 0x6b, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45,
	0x53, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53,
	0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41,
	0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x41, 0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x55, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x07, 0x2a, 0x3c, 0x0a, 0x18, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4f, 0x41, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x2a, 0x85, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x41, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x2a,
	0x64, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x44, 0x5f,
	0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4c, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x53, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x43, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x4c, 0x4f, 0x54, 0x10, 0x04, 0x2a, 0x5d, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x2a, 0x36, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x53,
	0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x8c, 0x01, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x41, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x62, 0x61, 0x72,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x31, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x4d, 0x32, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x33, 0x10, 0x03, 0x12, 0x06,
	0x0a, 0x02, 0x4d, 0x34, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x35, 0x10, 0x05, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x31, 0x30, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x31, 0x35, 0x10, 0x07,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x33, 0x30, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x31, 0x10,
	0x09, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x34, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x31, 0x32,
	0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x31, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x57, 0x31,
	0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4e, 0x31, 0x10, 0x0e, 0x42, 0x21, 0x5a, 0x1f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x61, 0x72, 0x6c, 0x6f, 0x73,
	0x6f, 0x6b, 0x75, 0x6d, 0x75, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
}

var (
	file_OpenApiModelMessages_proto_rawDescOnce sync.Once
	file_OpenApiModelMessages_proto_rawDescData = file_OpenApiModelMessages_proto_rawDesc
)

func file_OpenApiModelMessages_proto_rawDescGZIP() []byte {
	file_OpenApiModelMessages_proto_rawDescOnce.Do(func() {
		file_OpenApiModelMessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_OpenApiModelMessages_proto_rawDescData)
	})
	return file_OpenApiModelMessages_proto_rawDescData
}

var file_OpenApiModelMessages_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_OpenApiModelMessages_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_OpenApiModelMessages_proto_goTypes = []interface{}{
	(ProtoOAPayloadType)(0),                          // 0: messages.ProtoOAPayloadType
	(ProtoOAAccessRights)(0),                         // 1: messages.ProtoOAAccessRights
	(ProtoOATotalMarginCalculationType)(0),           // 2: messages.ProtoOATotalMarginCalculationType
	(ProtoOAAccountType)(0),                          // 3: messages.ProtoOAAccountType
	(ProtoOALimitedRiskMarginCalculationStrategy)(0), // 4: messages.ProtoOALimitedRiskMarginCalculationStrategy
	(ProtoOAPositionStatus)(0),                       // 5: messages.ProtoOAPositionStatus
	(ProtoOATradeSide)(0),                            // 6: messages.ProtoOATradeSide
	(ProtoOAOrderTriggerMethod)(0),                   // 7: messages.ProtoOAOrderTriggerMethod
	(ProtoOAOrderType)(0),                            // 8: messages.ProtoOAOrderType
	(ProtoOAOrderStatus)(0),                          // 9: messages.ProtoOAOrderStatus
	(ProtoOATimeInForce)(0),                          // 10: messages.ProtoOATimeInForce
	(ProtoOADayOfWeek)(0),                            // 11: messages.ProtoOADayOfWeek
	(ProtoOAMinCommissionType)(0),                    // 12: messages.ProtoOAMinCommissionType
	(ProtoOATradingMode)(0),                          // 13: messages.ProtoOATradingMode
	(ProtoOACommissionType)(0),                       // 14: messages.ProtoOACommissionType
	(ProtoOASymbolDistanceType)(0),                   // 15: messages.ProtoOASymbolDistanceType
	(ProtoOASwapCalculationType)(0),                  // 16: messages.ProtoOASwapCalculationType
	(ProtoOATrendbarPeriod)(0),                       // 17: messages.ProtoOATrendbarPeriod
	(*ProtoOATrader)(nil),                            // 18: messages.ProtoOATrader
	(*ProtoOALightSymbol)(nil),                       // 19: messages.ProtoOALightSymbol
	(*ProtoOAPosition)(nil),                          // 20: messages.ProtoOAPosition
	(*ProtoOATradeData)(nil),                         // 21: messages.ProtoOATradeData
	(*ProtoOAOrder)(nil),                             // 22: messages.ProtoOAOrder
	(*ProtoOASymbol)(nil),                            // 23: messages.ProtoOASymbol
	(*ProtoOAInterval)(nil),                          // 24: messages.ProtoOAInterval
	(*ProtoOATrendbar)(nil),                          // 25: messages.ProtoOATrendbar
	(*ProtoOAAsset)(nil),                             // 26: messages.ProtoOAAsset
	(*ProtoOAArchivedSymbol)(nil),                    // 27: messages.ProtoOAArchivedSymbol
}
var file_OpenApiModelMessages_proto_depIdxs = []int32{
	1,  // 0: messages.ProtoOATrader.accessRights:type_name -> messages.ProtoOAAccessRights
	2,  // 1: messages.ProtoOATrader.totalMarginCalculationType:type_name -> messages.ProtoOATotalMarginCalculationType
	3,  // 2: messages.ProtoOATrader.accountType:type_name -> messages.ProtoOAAccountType
	4,  // 3: messages.ProtoOATrader.limitedRiskMarginCalculationStrategy:type_name -> messages.ProtoOALimitedRiskMarginCalculationStrategy
	21, // 4: messages.ProtoOAPosition.tradeData:type_name -> messages.ProtoOATradeData
	5,  // 5: messages.ProtoOAPosition.positionStatus:type_name -> messages.ProtoOAPositionStatus
	7,  // 6: messages.ProtoOAPosition.stopLossTriggerMethod:type_name -> messages.ProtoOAOrderTriggerMethod
	6,  // 7: messages.ProtoOATradeData.tradeSide:type_name -> messages.ProtoOATradeSide
	21, // 8: messages.ProtoOAOrder.tradeData:type_name -> messages.ProtoOATradeData
	8,  // 9: messages.ProtoOAOrder.orderType:type_name -> messages.ProtoOAOrderType
	9,  // 10: messages.ProtoOAOrder.orderStatus:type_name -> messages.ProtoOAOrderStatus
	10, // 11: messages.ProtoOAOrder.timeInForce:type_name -> messages.ProtoOATimeInForce
	7,  // 12: messages.ProtoOAOrder.stopTriggerMethod:type_name -> messages.ProtoOAOrderTriggerMethod
	11, // 13: messages.ProtoOASymbol.swapRollover3Days:type_name -> messages.ProtoOADayOfWeek
	24, // 14: messages.ProtoOASymbol.schedule:type_name -> messages.ProtoOAInterval
	14, // 15: messages.ProtoOASymbol.commissionType:type_name -> messages.ProtoOACommissionType
	15, // 16: messages.ProtoOASymbol.distanceSetIn:type_name -> messages.ProtoOASymbolDistanceType
	12, // 17: messages.ProtoOASymbol.minCommissionType:type_name -> messages.ProtoOAMinCommissionType
	13, // 18: messages.ProtoOASymbol.tradingMode:type_name -> messages.ProtoOATradingMode
	11, // 19: messages.ProtoOASymbol.rolloverCommission3Days:type_name -> messages.ProtoOADayOfWeek
	16, // 20: messages.ProtoOASymbol.swapCalculationType:type_name -> messages.ProtoOASwapCalculationType
	17, // 21: messages.ProtoOATrendbar.period:type_name -> messages.ProtoOATrendbarPeriod
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_OpenApiModelMessages_proto_init() }
func file_OpenApiModelMessages_proto_init() {
	if File_OpenApiModelMessages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_OpenApiModelMessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOATrader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenApiModelMessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOALightSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenApiModelMessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOAPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenApiModelMessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOATradeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenApiModelMessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOAOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenApiModelMessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOASymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenApiModelMessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOAInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenApiModelMessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOATrendbar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenApiModelMessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOAAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenApiModelMessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOAArchivedSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_OpenApiModelMessages_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_OpenApiModelMessages_proto_goTypes,
		DependencyIndexes: file_OpenApiModelMessages_proto_depIdxs,
		EnumInfos:         file_OpenApiModelMessages_proto_enumTypes,
		MessageInfos:      file_OpenApiModelMessages_proto_msgTypes,
	}.Build()
	File_OpenApiModelMessages_proto = out.File
	file_OpenApiModelMessages_proto_rawDesc = nil
	file_OpenApiModelMessages_proto_goTypes = nil
	file_OpenApiModelMessages_proto_depIdxs = nil
}
